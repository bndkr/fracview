The following options are target specific:
  -m128bit-long-double        sizeof(long double) is 16.
  -m16                        Generate 16bit i386 code.
  -m32                        Generate 32bit i386 code.
  -m3dnow                     Support 3DNow! built-in functions.
  -m3dnowa                    Support Athlon 3Dnow! built-in functions.
  -m64                        Generate 64bit x86-64 code.
  -m80387                     Use hardware fp.
  -m8bit-idiv                 Expand 32bit/64bit integer divide into 8bit
                              unsigned integer divide with run-time check.
  -m96bit-long-double         sizeof(long double) is 12.
  -mabi=                      Generate code that conforms to the given ABI.
  -mabm                       Support code generation of Advanced Bit
                              Manipulation (ABM) instructions.
  -maccumulate-outgoing-args  Reserve space for outgoing arguments in the
                              function prologue.
  -maddress-mode=             Use given address mode.
  -madx                       Support flag-preserving add-carry instructions.
  -maes                       Support AES built-in functions and code
                              generation.
  -malign-data=               Use the given data alignment.
  -malign-double              Align some doubles on dword boundary.
  -malign-functions=          Function starts are aligned to this power of 2.
  -malign-jumps=              Jump targets are aligned to this power of 2.
  -malign-loops=              Loop code aligned to this power of 2.
  -malign-stringops           Align destination of the string operations.
  -march=                     Generate code for given CPU.
  -masm=                      Use given assembler dialect.
  -mavx                       Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1,
                              SSE4.2 and AVX built-in functions and code
                              generation.
  -mavx2                      Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1,
                              SSE4.2, AVX and AVX2 built-in functions and code
                              generation.
  -mavx256-split-unaligned-load Split 32-byte AVX unaligned load.
  -mavx256-split-unaligned-store Split 32-byte AVX unaligned store.
  -mavx5124fmaps              Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1,
                              SSE4.2, AVX, AVX2, AVX512F and AVX5124FMAPS built-
                              in functions and code generation.
  -mavx5124vnniw              Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1,
                              SSE4.2, AVX, AVX2, AVX512F and AVX5124VNNIW built-
                              in functions and code generation.
  -mavx512bf16                Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1,
                              SSE4.2, AVX, AVX2, AVX512F and AVX512BF16 built-
                              in functions and code generation.
  -mavx512bitalg              Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1,
                              SSE4.2, AVX, AVX2, AVX512F and AVX512BITALG built-
                              in functions and code generation.
  -mavx512bw                  Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1,
                              SSE4.2, AVX, AVX2 and AVX512F and AVX512BW built-
                              in functions and code generation.
  -mavx512cd                  Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1,
                              SSE4.2, AVX, AVX2 and AVX512F and AVX512CD built-
                              in functions and code generation.
  -mavx512dq                  Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1,
                              SSE4.2, AVX, AVX2 and AVX512F and AVX512DQ built-
                              in functions and code generation.
  -mavx512er                  Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1,
                              SSE4.2, AVX, AVX2 and AVX512F and AVX512ER built-
                              in functions and code generation.
  -mavx512f                   Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1,
                              SSE4.2, AVX, AVX2 and AVX512F built-in functions
                              and code generation.
  -mavx512ifma                Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1,
                              SSE4.2, AVX, AVX2 and AVX512F and AVX512IFMA
                              built-in functions and code generation.
  -mavx512pf                  Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1,
                              SSE4.2, AVX, AVX2 and AVX512F and AVX512PF built-
                              in functions and code generation.
  -mavx512vbmi                Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1,
                              SSE4.2, AVX, AVX2 and AVX512F and AVX512VBMI
                              built-in functions and code generation.
  -mavx512vbmi2               Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1,
                              SSE4.2, AVX, AVX2, AVX512F and AVX512VBMI2 built-
                              in functions and code generation.
  -mavx512vl                  Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1,
                              SSE4.2, AVX, AVX2 and AVX512F and AVX512VL built-
                              in functions and code generation.
  -mavx512vnni                Support AVX512VNNI built-in functions and code
                              generation.
  -mavx512vp2intersect        Support AVX512VP2INTERSECT built-in functions and
                              code generation.
  -mavx512vpopcntdq           Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1,
                              SSE4.2, AVX, AVX2, AVX512F and AVX512VPOPCNTDQ
                              built-in functions and code generation.
  -mbmi                       Support BMI built-in functions and code
                              generation.
  -mbmi2                      Support BMI2 built-in functions and code
                              generation.
  -mbranch-cost=<0,5>         Branches are this expensive (arbitrary units).
  -mcall-ms2sysv-xlogues      Use libgcc stubs to save and restore registers
                              clobbered by 64-bit Microsoft to System V ABI
                              calls.
  -mcld                       Generate cld instruction in the function prologue.
  -mcldemote                  Support CLDEMOTE built-in functions and code
                              generation.
  -mclflushopt                Support CLFLUSHOPT instructions.
  -mclwb                      Support CLWB instruction.
  -mclzero                    Support CLZERO built-in functions and code
                              generation.
  -mcmodel=                   Use given x86-64 code model.
  -mconsole                   Create console application.
  -mcrc32                     Support code generation of crc32 instruction.
  -mcx16                      Support code generation of cmpxchg16b instruction.
  -mdispatch-scheduler        Do dispatch scheduling if processor is bdver1,
                              bdver2, bdver3, bdver4 or znver1 and Haifa
                              scheduling is selected.
  -mdll                       Generate code for a DLL.
  -menqcmd                    Support ENQCMD built-in functions and code
                              generation.
  -mf16c                      Support F16C built-in functions and code
                              generation.
  -mfancy-math-387            Generate sin, cos, sqrt for FPU.
  -mfentry                    Emit profiling counter call at function entry
                              before prologue.
  -mfentry-name=              Set name of __fentry__ symbol called at function
                              entry.
  -mfentry-section=           Set name of section to record mrecord-mcount
                              calls.
  -mfma                       Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1,
                              SSE4.2, AVX and FMA built-in functions and code
                              generation.
  -mfma4                      Support FMA4 built-in functions and code
                              generation.
  -mforce-drap                Always use Dynamic Realigned Argument Pointer
                              (DRAP) to realign stack.
  -mforce-indirect-call       Make all function calls indirect.
  -mfp-ret-in-387             Return values of functions in FPU registers.
  -mfpmath=                   Generate floating point mathematics using given
                              instruction set.
  -mfsgsbase                  Support FSGSBASE built-in functions and code
                              generation.
  -mfunction-return=          Convert function return to call and return thunk.
  -mfxsr                      Support FXSAVE and FXRSTOR instructions.
  -mgeneral-regs-only         Generate code which uses only the general
                              registers.
  -mgfni                      Support GFNI built-in functions and code
                              generation.
  -mhard-float                Use hardware fp.
  -mhle                       Support Hardware Lock Elision prefixes.
  -miamcu                     Generate code that conforms to Intel MCU psABI.
  -mieee-fp                   Use IEEE math for fp comparisons.
  -mincoming-stack-boundary=  Assume incoming stack aligned to this power of 2.
  -mindirect-branch-register  Force indirect call and jump via register.
  -mindirect-branch=          Convert indirect call and jump to call and return
                              thunks.
  -minline-all-stringops      Inline all known string operations.
  -minline-stringops-dynamically Inline memset/memcpy string operations, but
                              perform inline version only for small blocks.
  -minstrument-return=        Instrument function exit in instrumented
                              functions with __fentry__.
  -mlarge-data-threshold=<number> Data greater than given threshold will go
                              into .ldata section in x86-64 medium model.
  -mlong-double-128           Use 128-bit long double.
  -mlong-double-64            Use 64-bit long double.
  -mlong-double-80            Use 80-bit long double.
  -mlwp                       Support LWP built-in functions and code
                              generation.
  -mlzcnt                     Support LZCNT built-in function and code
                              generation.
  -mmanual-endbr              Insert ENDBR instruction at function entry only
                              via cf_check attribute for CET instrumentation.
  -mmemcpy-strategy=          Specify memcpy expansion strategy when expected
                              size is known.
  -mmemset-strategy=          Specify memset expansion strategy when expected
                              size is known.
  -mmmx                       Support MMX built-in functions.
  -mmovbe                     Support code generation of movbe instruction.
  -mmovdir64b                 Support MOVDIR64B built-in functions and code
                              generation.
  -mmovdiri                   Support MOVDIRI built-in functions and code
                              generation.
  -mmpx                       Removed in GCC 9.  This switch has no effect.
  -mms-bitfields              Use native (MS) bitfield layout.
  -mmwaitx                    Support MWAITX and MONITORX built-in functions
                              and code generation.
  -mno-default                Clear all tune features.
  -mno-sse4                   Do not support SSE4.1 and SSE4.2 built-in
                              functions and code generation.
  -mnop-fun-dllimport         Ignore dllimport for functions.
  -mnop-mcount                Generate mcount/__fentry__ calls as nops. To
                              activate they need to be patched in.
  -momit-leaf-frame-pointer   Omit the frame pointer in leaf functions.
  -mpc32                      Set 80387 floating-point precision to 32-bit.
  -mpc64                      Set 80387 floating-point precision to 64-bit.
  -mpc80                      Set 80387 floating-point precision to 80-bit.
  -mpclmul                    Support PCLMUL built-in functions and code
                              generation.
  -mpconfig                   Support PCONFIG built-in functions and code
                              generation.
  -mpe-aligned-commons        Use the GNU extension to the PE format for
                              aligned common data.
  -mpku                       Support PKU built-in functions and code
                              generation.
  -mpopcnt                    Support code generation of popcnt instruction.
  -mprefer-avx128             Use 128-bit AVX instructions instead of 256-bit
                              AVX instructions in the auto-vectorizer.  Same as
                              -mprefer-vector-width=.
  -mprefer-vector-width=      Use given register vector width instructions
                              instead of maximum register width in the auto-
                              vectorizer.
  -mpreferred-stack-boundary= Attempt to keep stack aligned to this power of 2.
  -mprefetchwt1               Support PREFETCHWT1 built-in functions and code
                              generation.
  -mprfchw                    Support PREFETCHW instruction.
  -mptwrite                   Support PTWRITE built-in functions and code
                              generation.
  -mpush-args                 Use push instructions to save outgoing arguments.
  -mrdpid                     Support RDPID built-in functions and code
                              generation.
  -mrdrnd                     Support RDRND built-in functions and code
                              generation.
  -mrdseed                    Support RDSEED instruction.
  -mrecip                     Generate reciprocals instead of divss and sqrtss.
  -mrecip=                    Control generation of reciprocal estimates.
  -mrecord-mcount             Generate __mcount_loc section with all mcount or
                              __fentry__ calls.
  -mrecord-return             Generate a __return_loc section pointing to all
                              return instrumentation code.
  -mred-zone                  Use red-zone in the x86-64 code.
  -mregparm=                  Number of registers used to pass integer
                              arguments.
  -mrtd                       Alternate calling convention.
  -mrtm                       Support RTM built-in functions and code
                              generation.
  -msahf                      Support code generation of sahf instruction in
                              64bit x86-64 code.
  -msgx                       Support SGX built-in functions and code
                              generation.
  -msha                       Support SHA1 and SHA256 built-in functions and
                              code generation.
  -mshstk                     Enable shadow stack built-in functions from
                              Control-flow Enforcement Technology (CET).
  -mskip-rax-setup            Skip setting up RAX register when passing
                              variable arguments.
  -msoft-float                Do not use hardware fp.
  -msse                       Support MMX and SSE built-in functions and code
                              generation.
  -msse2                      Support MMX, SSE and SSE2 built-in functions and
                              code generation.
  -msse2avx                   Encode SSE instructions with VEX prefix.
  -msse3                      Support MMX, SSE, SSE2 and SSE3 built-in
                              functions and code generation.
  -msse4                      Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1 and
                              SSE4.2 built-in functions and code generation.
  -msse4.1                    Support MMX, SSE, SSE2, SSE3, SSSE3 and SSE4.1
                              built-in functions and code generation.
  -msse4.2                    Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1 and
                              SSE4.2 built-in functions and code generation.
  -msse4a                     Support MMX, SSE, SSE2, SSE3 and SSE4A built-in
                              functions and code generation.
  -msseregparm                Use SSE register passing conventions for SF and
                              DF mode.
  -mssse3                     Support MMX, SSE, SSE2, SSE3 and SSSE3 built-in
                              functions and code generation.
  -mstack-arg-probe           Enable stack probing.
  -mstack-protector-guard-offset= Use the given offset for addressing the stack-
                              protector guard.
  -mstack-protector-guard-reg= Use the given base register for addressing the
                              stack-protector guard.
  -mstack-protector-guard-symbol= Use the given symbol for addressing the stack-
                              protector guard.
  -mstack-protector-guard=    Use given stack-protector guard.
  -mstackrealign              Realign stack in prologue.
  -mstringop-strategy=        Chose strategy to generate stringop using.
  -mstv                       Disable Scalar to Vector optimization pass
                              transforming 64-bit integer computations into a
                              vector ones.
  -mtbm                       Support TBM built-in functions and code
                              generation.
  -mthreads                   Use Mingw-specific thread support.
  -mtls-dialect=              Use given thread-local storage dialect.
  -mtls-direct-seg-refs       Use direct references against %gs when accessing
                              tls data.
  -mtune-ctrl=                Fine grain control of tune features.
  -mtune=                     Schedule code for given CPU.
  -muse-libstdc-wrappers      Compile code that relies on Cygwin DLL wrappers
                              to support C++ operator new/delete replacement.
  -mvaes                      Support VAES built-in functions and code
                              generation.
  -mveclibabi=                Vector library ABI to use.
  -mvect8-ret-in-mem          Return 8-byte vectors in memory.
  -mvpclmulqdq                Support VPCLMULQDQ built-in functions and code
                              generation.
  -mvzeroupper                Generate vzeroupper instruction before a transfer
                              of control flow out of the function.
  -mwaitpkg                   Support WAITPKG built-in functions and code
                              generation.
  -mwbnoinvd                  Support WBNOINVD built-in functions and code
                              generation.
  -mwin32                     Set Windows defines.
  -mwindows                   Create GUI application.
  -mx32                       Generate 32bit x86-64 code.
  -mxop                       Support XOP built-in functions and code
                              generation.
  -mxsave                     Support XSAVE and XRSTOR instructions.
  -mxsavec                    Support XSAVEC instructions.
  -mxsaveopt                  Support XSAVEOPT instruction.
  -mxsaves                    Support XSAVES and XRSTORS instructions.

  Known assembler dialects (for use with the -masm= option):
    att intel

  Known ABIs (for use with the -mabi= option):
    ms sysv

  Known code models (for use with the -mcmodel= option):
    32 kernel large medium small

  Valid arguments to -mfpmath=:
    387 387+sse 387,sse both sse sse+387 sse,387

  Known indirect branch choices (for use with the -mindirect-branch=/-mfunction-return= options):
    keep thunk thunk-extern thunk-inline

  Known choices for return instrumentation with -minstrument-return=:
    call none nop5

  Known data alignment choices (for use with the -malign-data= option):
    abi cacheline compat

  Known vectorization library ABIs (for use with the -mveclibabi= option):
    acml svml

  Known address mode (for use with the -maddress-mode= option):
    long short

  Known preferred register vector length (to use with the -mprefer-vector-width= option):
    128 256 512 none

  Known stack protector guard (for use with the -mstack-protector-guard= option):
    global tls

  Valid arguments to -mstringop-strategy=:
    byte_loop libcall loop rep_4byte rep_8byte rep_byte unrolled_loop
    vector_loop

  Known TLS dialects (for use with the -mtls-dialect= option):
    gnu gnu2

  Known valid arguments for -march= option:
    i386 i486 i586 pentium lakemont pentium-mmx winchip-c6 winchip2 c3 samuel-2 c3-2 nehemiah c7 esther i686 pentiumpro pentium2 pentium3 pentium3m pentium-m pentium4 pentium4m prescott nocona core2 nehalem corei7 westmere sandybridge corei7-avx ivybridge core-avx-i haswell core-avx2 broadwell skylake skylake-avx512 cannonlake icelake-client icelake-server cascadelake tigerlake cooperlake bonnell atom silvermont slm goldmont goldmont-plus tremont knl knm intel geode k6 k6-2 k6-3 athlon athlon-tbird athlon-4 athlon-xp athlon-mp x86-64 eden-x2 nano nano-1000 nano-2000 nano-3000 nano-x2 eden-x4 nano-x4 k8 k8-sse3 opteron opteron-sse3 athlon64 athlon64-sse3 athlon-fx amdfam10 barcelona bdver1 bdver2 bdver3 bdver4 znver1 znver2 btver1 btver2 generic native

  Known valid arguments for -mtune= option:
    generic i386 i486 pentium lakemont pentiumpro pentium4 nocona core2 nehalem sandybridge haswell bonnell silvermont goldmont goldmont-plus tremont knl knm skylake skylake-avx512 cannonlake icelake-client icelake-server cascadelake tigerlake cooperlake intel geode k6 athlon k8 amdfam10 bdver1 bdver2 bdver3 bdver4 btver1 btver2 znver1 znver2

Assembler options
=================

Use "-Wa,OPTION" to pass "OPTION" to the assembler.

  -n                      Do not optimize code alignment
  -q                      quieten some warnings
  --32/--64/--x32         generate 32bit/64bit/x32 code
  --divide                ignored
  -march=CPU[,+EXTENSION...]
                          generate code for CPU and EXTENSION, CPU is one of:
                           generic32, generic64, i386, i486, i586, i686,
                           pentium, pentiumpro, pentiumii, pentiumiii, pentium4,
                           prescott, nocona, core, core2, corei7, l1om, k1om,
                           iamcu, k6, k6_2, athlon, opteron, k8, amdfam10,
                           bdver1, bdver2, bdver3, bdver4, znver1, znver2,
                           btver1, btver2
                          EXTENSION is combination of:
                           8087, 287, 387, 687, cmov, fxsr, mmx, sse, sse2,
                           sse3, ssse3, sse4.1, sse4.2, sse4, avx, avx2,
                           avx512f, avx512cd, avx512er, avx512pf, avx512dq,
                           avx512bw, avx512vl, vmx, vmfunc, smx, xsave,
                           xsaveopt, xsavec, xsaves, aes, pclmul, fsgsbase,
                           rdrnd, f16c, bmi2, fma, fma4, xop, lwp, movbe, cx16,
                           ept, lzcnt, hle, rtm, invpcid, clflush, nop, syscall,
                           rdtscp, 3dnow, 3dnowa, padlock, svme, sse4a, abm,
                           bmi, tbm, adx, rdseed, prfchw, smap, mpx, sha,
                           clflushopt, prefetchwt1, se1, clwb, avx512ifma,
                           avx512vbmi, avx512_4fmaps, avx512_4vnniw,
                           avx512_vpopcntdq, avx512_vbmi2, avx512_vnni,
                           avx512_bitalg, clzero, mwaitx, ospke, rdpid, ptwrite,
                           ibt, shstk, gfni, vaes, vpclmulqdq, wbnoinvd,
                           pconfig, waitpkg, cldemote, movdiri, movdir64b,
                           avx512_bf16, avx512_vp2intersect, enqcmd, rdpru,
                           mcommit, no87, no287, no387, no687, nocmov, nofxsr,
                           nommx, nosse, nosse2, nosse3, nossse3, nosse4.1,
                           nosse4.2, nosse4, noavx, noavx2, noavx512f,
                           noavx512cd, noavx512er, noavx512pf, noavx512dq,
                           noavx512bw, noavx512vl, noavx512ifma, noavx512vbmi,
                           noavx512_4fmaps, noavx512_4vnniw, noavx512_vpopcntdq,
                           noavx512_vbmi2, noavx512_vnni, noavx512_bitalg,
                           noibt, noshstk, nomovdiri, nomovdir64b,
                           noavx512_bf16, noavx512_vp2intersect, noenqcmd
  -mtune=CPU              optimize for CPU, CPU is one of:
                           generic32, generic64, i8086, i186, i286, i386, i486,
                           i586, i686, pentium, pentiumpro, pentiumii,
                           pentiumiii, pentium4, prescott, nocona, core, core2,
                           corei7, l1om, k1om, iamcu, k6, k6_2, athlon, opteron,
                           k8, amdfam10, bdver1, bdver2, bdver3, bdver4, znver1,
                           znver2, btver1, btver2
  -msse2avx               encode SSE instructions with VEX prefix
  -msse-check=[none|error|warning] (default: warning)
                          check SSE instructions
  -moperand-check=[none|error|warning] (default: warning)
                          check operand combinations for validity
  -mavxscalar=[128|256] (default: 128)
                          encode scalar AVX instructions with specific vector
                           length
  -mvexwig=[0|1] (default: 0)
                          encode VEX instructions with specific VEX.W value
                           for VEX.W bit ignored instructions
  -mevexlig=[128|256|512] (default: 128)
                          encode scalar EVEX instructions with specific vector
                           length
  -mevexwig=[0|1] (default: 0)
                          encode EVEX instructions with specific EVEX.W value
                           for EVEX.W bit ignored instructions
  -mevexrcig=[rne|rd|ru|rz] (default: rne)
                          encode EVEX instructions with specific EVEX.RC value
                           for SAE-only ignored instructions
  -mmnemonic=[att|intel] (default: att)
                          use AT&T/Intel mnemonic
  -msyntax=[att|intel] (default: att)
                          use AT&T/Intel syntax
  -mindex-reg             support pseudo index registers
  -mnaked-reg             don't require `%' prefix for registers
  -madd-bnd-prefix        add BND prefix for all valid branches
  -mbig-obj               generate big object files
  -momit-lock-prefix=[no|yes] (default: no)
                          strip all lock prefixes
  -mfence-as-lock-add=[no|yes] (default: no)
                          encode lfence, mfence and sfence as
                           lock addl $0x0, (%{re}sp)
  -mrelax-relocations=[no|yes] (default: yes)
                          generate relax relocations
  -malign-branch-boundary=NUM (default: 0)
                          align branches within NUM byte boundary
  -malign-branch=TYPE[+TYPE...] (default: jcc+fused+jmp)
                          TYPE is combination of jcc, fused, jmp, call, ret,
                           indirect
                          specify types of branches to align
  -malign-branch-prefix-size=NUM (default: 5)
                          align branches with NUM prefixes per instruction
  -mbranches-within-32B-boundaries
                          align branches within 32 byte boundary
  -mamd64                 accept only AMD64 ISA [default]
  -mintel64               accept only Intel64 ISA

Linker options
==============

Use "-Wl,OPTION" to pass "OPTION" to the linker.

alphavms: 
  --identification <string>          Set the identification of the output
arm_wince_pe: 
  --base_file <basefile>             Generate a base file for relocatable DLLs
  --dll                              Set image base to the default for DLLs
  --file-alignment <size>            Set file alignment
  --heap <size>                      Set initial size of the heap
  --image-base <address>             Set start address of the executable
  --major-image-version <number>     Set version number of the executable
  --major-os-version <number>        Set minimum required OS version
  --major-subsystem-version <number> Set minimum required OS subsystem version
  --minor-image-version <number>     Set revision number of the executable
  --minor-os-version <number>        Set minimum required OS revision
  --minor-subsystem-version <number> Set minimum required OS subsystem revision
  --section-alignment <size>         Set section alignment
  --stack <size>                     Set size of the initial stack
  --subsystem <name>[:<version>]     Set required OS subsystem [& version]
  --support-old-code                 Support interworking with old code
  --[no-]leading-underscore          Set explicit symbol underscore prefix mode
  --thumb-entry=<symbol>             Set the entry point to be Thumb <symbol>
  --[no-]insert-timestamp            Use a real timestamp rather than zero (default).
                                     This makes binaries non-deterministic
  --add-stdcall-alias                Export symbols with and without @nn
  --disable-stdcall-fixup            Don't link _sym to _sym@nn
  --enable-stdcall-fixup             Link _sym to _sym@nn without warnings
  --exclude-symbols sym,sym,...      Exclude symbols from automatic export
  --exclude-all-symbols              Exclude all symbols from automatic export
  --exclude-libs lib,lib,...         Exclude libraries from automatic export
  --exclude-modules-for-implib mod,mod,...
                                     Exclude objects, archive members from auto
                                     export, place into import library instead.
  --export-all-symbols               Automatically export all globals to DLL
  --kill-at                          Remove @nn from exported symbols
  --output-def <file>                Generate a .DEF file for the built DLL
  --warn-duplicate-exports           Warn about duplicate exports
  --compat-implib                    Create backward compatible import libs;
                                       create __imp_<SYMBOL> as well.
  --enable-auto-image-base[=<address>] Automatically choose image base for DLLs
                                       (optionally starting with address) unless
                                       specifically set with --image-base
  --disable-auto-image-base          Do not auto-choose image base. (default)
  --dll-search-prefix=<string>       When linking dynamically to a dll without
                                       an importlib, use <string><basename>.dll
                                       in preference to lib<basename>.dll 
  --enable-auto-import               Do sophisticated linking of _sym to
                                       __imp_sym for DATA references
  --disable-auto-import              Do not auto-import DATA items from DLLs
  --enable-runtime-pseudo-reloc      Work around auto-import limitations by
                                       adding pseudo-relocations resolved at
                                       runtime.
  --disable-runtime-pseudo-reloc     Do not add runtime pseudo-relocations for
                                       auto-imported DATA.
  --enable-extra-pe-debug            Enable verbose debug output when building
                                       or linking to DLLs (esp. auto-import)
  --large-address-aware              Executable supports virtual addresses
                                       greater than 2 gigabytes
  --disable-large-address-aware      Executable does not support virtual
                                       addresses greater than 2 gigabytes
  --enable-long-section-names        Use long COFF section names even in
                                       executable image files
  --disable-long-section-names       Never use long COFF section names, even
                                       in object files
  --dynamicbase                      Image base address may be relocated using
                                       address space layout randomization (ASLR)
  --enable-reloc-section             Create the base relocation table
  --forceinteg               Code integrity checks are enforced
  --nxcompat                 Image is compatible with data execution prevention
  --no-isolation             Image understands isolation but do not isolate the image
  --no-seh                   Image does not use SEH. No SE handler may
                                       be called in this image
  --no-bind                  Do not bind this image
  --wdmdriver                Driver uses the WDM model
  --tsaware                  Image is Terminal Server aware
  --build-id[=STYLE]         Generate build ID
armelf: 
  --thumb-entry=<sym>         Set the entry point to be Thumb symbol <sym>
  --be8                       Output BE8 format image
  --target1-rel               Interpret R_ARM_TARGET1 as R_ARM_REL32
  --target1-abs               Interpret R_ARM_TARGET1 as R_ARM_ABS32
  --target2=<type>            Specify definition of R_ARM_TARGET2
  --fix-v4bx                  Rewrite BX rn as MOV pc, rn for ARMv4
  --fix-v4bx-interworking     Rewrite BX rn branch to ARMv4 interworking veneer
  --use-blx                   Enable use of BLX instructions
  --vfp11-denorm-fix          Specify how to fix VFP11 denorm erratum
  --fix-stm32l4xx-629360      Specify how to fix STM32L4XX 629360 erratum
  --no-enum-size-warning      Don't warn about objects with incompatible
                                enum sizes
  --no-wchar-size-warning     Don't warn about objects with incompatible
                                wchar_t sizes
  --pic-veneer                Always generate PIC interworking veneers
  --long-plt                  Generate long .plt entries
                              to handle large .plt/.got displacements
  --cmse-implib               Make import library to be a secure gateway import
                                library as per ARMv8-M Security Extensions
  --in-implib                 Import library whose symbols address must
                                remain stable
  --stub-group-size=N         Maximum size of a group of input sections that
                                can be handled by one stub section.  A negative
                                value locates all stubs after their branches
                                (with a group size of -N), while a positive
                                value allows two groups of input sections, one
                                before, and one after each stub section.
                                Values of +/-1 indicate the linker should
                                choose suitable defaults.
  --[no-]fix-cortex-a8        Disable/enable Cortex-A8 Thumb-2 branch erratum fix
  --no-merge-exidx-entries    Disable merging exidx entries
  --[no-]fix-arm1176          Disable/enable ARM1176 BLX immediate erratum fix
armelf_fbsd: 
  --thumb-entry=<sym>         Set the entry point to be Thumb symbol <sym>
  --be8                       Output BE8 format image
  --target1-rel               Interpret R_ARM_TARGET1 as R_ARM_REL32
  --target1-abs               Interpret R_ARM_TARGET1 as R_ARM_ABS32
  --target2=<type>            Specify definition of R_ARM_TARGET2
  --fix-v4bx                  Rewrite BX rn as MOV pc, rn for ARMv4
  --fix-v4bx-interworking     Rewrite BX rn branch to ARMv4 interworking veneer
  --use-blx                   Enable use of BLX instructions
  --vfp11-denorm-fix          Specify how to fix VFP11 denorm erratum
  --fix-stm32l4xx-629360      Specify how to fix STM32L4XX 629360 erratum
  --no-enum-size-warning      Don't warn about objects with incompatible
                                enum sizes
  --no-wchar-size-warning     Don't warn about objects with incompatible
                                wchar_t sizes
  --pic-veneer                Always generate PIC interworking veneers
  --long-plt                  Generate long .plt entries
                              to handle large .plt/.got displacements
  --cmse-implib               Make import library to be a secure gateway import
                                library as per ARMv8-M Security Extensions
  --in-implib                 Import library whose symbols address must
                                remain stable
  --stub-group-size=N         Maximum size of a group of input sections that
                                can be handled by one stub section.  A negative
                                value locates all stubs after their branches
                                (with a group size of -N), while a positive
                                value allows two groups of input sections, one
                                before, and one after each stub section.
                                Values of +/-1 indicate the linker should
                                choose suitable defaults.
  --[no-]fix-cortex-a8        Disable/enable Cortex-A8 Thumb-2 branch erratum fix
  --no-merge-exidx-entries    Disable merging exidx entries
  --[no-]fix-arm1176          Disable/enable ARM1176 BLX immediate erratum fix
armelf_fuchsia: 
  --thumb-entry=<sym>         Set the entry point to be Thumb symbol <sym>
  --be8                       Output BE8 format image
  --target1-rel               Interpret R_ARM_TARGET1 as R_ARM_REL32
  --target1-abs               Interpret R_ARM_TARGET1 as R_ARM_ABS32
  --target2=<type>            Specify definition of R_ARM_TARGET2
  --fix-v4bx                  Rewrite BX rn as MOV pc, rn for ARMv4
  --fix-v4bx-interworking     Rewrite BX rn branch to ARMv4 interworking veneer
  --use-blx                   Enable use of BLX instructions
  --vfp11-denorm-fix          Specify how to fix VFP11 denorm erratum
  --fix-stm32l4xx-629360      Specify how to fix STM32L4XX 629360 erratum
  --no-enum-size-warning      Don't warn about objects with incompatible
                                enum sizes
  --no-wchar-size-warning     Don't warn about objects with incompatible
                                wchar_t sizes
  --pic-veneer                Always generate PIC interworking veneers
  --long-plt                  Generate long .plt entries
                              to handle large .plt/.got displacements
  --cmse-implib               Make import library to be a secure gateway import
                                library as per ARMv8-M Security Extensions
  --in-implib                 Import library whose symbols address must
                                remain stable
  --stub-group-size=N         Maximum size of a group of input sections that
                                can be handled by one stub section.  A negative
                                value locates all stubs after their branches
                                (with a group size of -N), while a positive
                                value allows two groups of input sections, one
                                before, and one after each stub section.
                                Values of +/-1 indicate the linker should
                                choose suitable defaults.
  --[no-]fix-cortex-a8        Disable/enable Cortex-A8 Thumb-2 branch erratum fix
  --no-merge-exidx-entries    Disable merging exidx entries
  --[no-]fix-arm1176          Disable/enable ARM1176 BLX immediate erratum fix
armelf_linux: 
  --thumb-entry=<sym>         Set the entry point to be Thumb symbol <sym>
  --be8                       Output BE8 format image
  --target1-rel               Interpret R_ARM_TARGET1 as R_ARM_REL32
  --target1-abs               Interpret R_ARM_TARGET1 as R_ARM_ABS32
  --target2=<type>            Specify definition of R_ARM_TARGET2
  --fix-v4bx                  Rewrite BX rn as MOV pc, rn for ARMv4
  --fix-v4bx-interworking     Rewrite BX rn branch to ARMv4 interworking veneer
  --use-blx                   Enable use of BLX instructions
  --vfp11-denorm-fix          Specify how to fix VFP11 denorm erratum
  --fix-stm32l4xx-629360      Specify how to fix STM32L4XX 629360 erratum
  --no-enum-size-warning      Don't warn about objects with incompatible
                                enum sizes
  --no-wchar-size-warning     Don't warn about objects with incompatible
                                wchar_t sizes
  --pic-veneer                Always generate PIC interworking veneers
  --long-plt                  Generate long .plt entries
                              to handle large .plt/.got displacements
  --cmse-implib               Make import library to be a secure gateway import
                                library as per ARMv8-M Security Extensions
  --in-implib                 Import library whose symbols address must
                                remain stable
  --stub-group-size=N         Maximum size of a group of input sections that
                                can be handled by one stub section.  A negative
                                value locates all stubs after their branches
                                (with a group size of -N), while a positive
                                value allows two groups of input sections, one
                                before, and one after each stub section.
                                Values of +/-1 indicate the linker should
                                choose suitable defaults.
  --[no-]fix-cortex-a8        Disable/enable Cortex-A8 Thumb-2 branch erratum fix
  --no-merge-exidx-entries    Disable merging exidx entries
  --[no-]fix-arm1176          Disable/enable ARM1176 BLX immediate erratum fix
armelf_linux_eabi: 
  --thumb-entry=<sym>         Set the entry point to be Thumb symbol <sym>
  --be8                       Output BE8 format image
  --target1-rel               Interpret R_ARM_TARGET1 as R_ARM_REL32
  --target1-abs               Interpret R_ARM_TARGET1 as R_ARM_ABS32
  --target2=<type>            Specify definition of R_ARM_TARGET2
  --fix-v4bx                  Rewrite BX rn as MOV pc, rn for ARMv4
  --fix-v4bx-interworking     Rewrite BX rn branch to ARMv4 interworking veneer
  --use-blx                   Enable use of BLX instructions
  --vfp11-denorm-fix          Specify how to fix VFP11 denorm erratum
  --fix-stm32l4xx-629360      Specify how to fix STM32L4XX 629360 erratum
  --no-enum-size-warning      Don't warn about objects with incompatible
                                enum sizes
  --no-wchar-size-warning     Don't warn about objects with incompatible
                                wchar_t sizes
  --pic-veneer                Always generate PIC interworking veneers
  --long-plt                  Generate long .plt entries
                              to handle large .plt/.got displacements
  --cmse-implib               Make import library to be a secure gateway import
                                library as per ARMv8-M Security Extensions
  --in-implib                 Import library whose symbols address must
                                remain stable
  --stub-group-size=N         Maximum size of a group of input sections that
                                can be handled by one stub section.  A negative
                                value locates all stubs after their branches
                                (with a group size of -N), while a positive
                                value allows two groups of input sections, one
                                before, and one after each stub section.
                                Values of +/-1 indicate the linker should
                                choose suitable defaults.
  --[no-]fix-cortex-a8        Disable/enable Cortex-A8 Thumb-2 branch erratum fix
  --no-merge-exidx-entries    Disable merging exidx entries
  --[no-]fix-arm1176          Disable/enable ARM1176 BLX immediate erratum fix
armelf_linux_fdpiceabi: 
  --thumb-entry=<sym>         Set the entry point to be Thumb symbol <sym>
  --be8                       Output BE8 format image
  --target1-rel               Interpret R_ARM_TARGET1 as R_ARM_REL32
  --target1-abs               Interpret R_ARM_TARGET1 as R_ARM_ABS32
  --target2=<type>            Specify definition of R_ARM_TARGET2
  --fix-v4bx                  Rewrite BX rn as MOV pc, rn for ARMv4
  --fix-v4bx-interworking     Rewrite BX rn branch to ARMv4 interworking veneer
  --use-blx                   Enable use of BLX instructions
  --vfp11-denorm-fix          Specify how to fix VFP11 denorm erratum
  --fix-stm32l4xx-629360      Specify how to fix STM32L4XX 629360 erratum
  --no-enum-size-warning      Don't warn about objects with incompatible
                                enum sizes
  --no-wchar-size-warning     Don't warn about objects with incompatible
                                wchar_t sizes
  --pic-veneer                Always generate PIC interworking veneers
  --long-plt                  Generate long .plt entries
                              to handle large .plt/.got displacements
  --cmse-implib               Make import library to be a secure gateway import
                                library as per ARMv8-M Security Extensions
  --in-implib                 Import library whose symbols address must
                                remain stable
  --stub-group-size=N         Maximum size of a group of input sections that
                                can be handled by one stub section.  A negative
                                value locates all stubs after their branches
                                (with a group size of -N), while a positive
                                value allows two groups of input sections, one
                                before, and one after each stub section.
                                Values of +/-1 indicate the linker should
                                choose suitable defaults.
  --[no-]fix-cortex-a8        Disable/enable Cortex-A8 Thumb-2 branch erratum fix
  --no-merge-exidx-entries    Disable merging exidx entries
  --[no-]fix-arm1176          Disable/enable ARM1176 BLX immediate erratum fix
armelf_nacl: 
  --thumb-entry=<sym>         Set the entry point to be Thumb symbol <sym>
  --be8                       Output BE8 format image
  --target1-rel               Interpret R_ARM_TARGET1 as R_ARM_REL32
  --target1-abs               Interpret R_ARM_TARGET1 as R_ARM_ABS32
  --target2=<type>            Specify definition of R_ARM_TARGET2
  --fix-v4bx                  Rewrite BX rn as MOV pc, rn for ARMv4
  --fix-v4bx-interworking     Rewrite BX rn branch to ARMv4 interworking veneer
  --use-blx                   Enable use of BLX instructions
  --vfp11-denorm-fix          Specify how to fix VFP11 denorm erratum
  --fix-stm32l4xx-629360      Specify how to fix STM32L4XX 629360 erratum
  --no-enum-size-warning      Don't warn about objects with incompatible
                                enum sizes
  --no-wchar-size-warning     Don't warn about objects with incompatible
                                wchar_t sizes
  --pic-veneer                Always generate PIC interworking veneers
  --long-plt                  Generate long .plt entries
                              to handle large .plt/.got displacements
  --cmse-implib               Make import library to be a secure gateway import
                                library as per ARMv8-M Security Extensions
  --in-implib                 Import library whose symbols address must
                                remain stable
  --stub-group-size=N         Maximum size of a group of input sections that
                                can be handled by one stub section.  A negative
                                value locates all stubs after their branches
                                (with a group size of -N), while a positive
                                value allows two groups of input sections, one
                                before, and one after each stub section.
                                Values of +/-1 indicate the linker should
                                choose suitable defaults.
  --[no-]fix-cortex-a8        Disable/enable Cortex-A8 Thumb-2 branch erratum fix
  --no-merge-exidx-entries    Disable merging exidx entries
  --[no-]fix-arm1176          Disable/enable ARM1176 BLX immediate erratum fix
armelf_nbsd: 
  --thumb-entry=<sym>         Set the entry point to be Thumb symbol <sym>
  --be8                       Output BE8 format image
  --target1-rel               Interpret R_ARM_TARGET1 as R_ARM_REL32
  --target1-abs               Interpret R_ARM_TARGET1 as R_ARM_ABS32
  --target2=<type>            Specify definition of R_ARM_TARGET2
  --fix-v4bx                  Rewrite BX rn as MOV pc, rn for ARMv4
  --fix-v4bx-interworking     Rewrite BX rn branch to ARMv4 interworking veneer
  --use-blx                   Enable use of BLX instructions
  --vfp11-denorm-fix          Specify how to fix VFP11 denorm erratum
  --fix-stm32l4xx-629360      Specify how to fix STM32L4XX 629360 erratum
  --no-enum-size-warning      Don't warn about objects with incompatible
                                enum sizes
  --no-wchar-size-warning     Don't warn about objects with incompatible
                                wchar_t sizes
  --pic-veneer                Always generate PIC interworking veneers
  --long-plt                  Generate long .plt entries
                              to handle large .plt/.got displacements
  --cmse-implib               Make import library to be a secure gateway import
                                library as per ARMv8-M Security Extensions
  --in-implib                 Import library whose symbols address must
                                remain stable
  --stub-group-size=N         Maximum size of a group of input sections that
                                can be handled by one stub section.  A negative
                                value locates all stubs after their branches
                                (with a group size of -N), while a positive
                                value allows two groups of input sections, one
                                before, and one after each stub section.
                                Values of +/-1 indicate the linker should
                                choose suitable defaults.
  --[no-]fix-cortex-a8        Disable/enable Cortex-A8 Thumb-2 branch erratum fix
  --no-merge-exidx-entries    Disable merging exidx entries
  --[no-]fix-arm1176          Disable/enable ARM1176 BLX immediate erratum fix
armelf_phoenix: 
  --thumb-entry=<sym>         Set the entry point to be Thumb symbol <sym>
  --be8                       Output BE8 format image
  --target1-rel               Interpret R_ARM_TARGET1 as R_ARM_REL32
  --target1-abs               Interpret R_ARM_TARGET1 as R_ARM_ABS32
  --target2=<type>            Specify definition of R_ARM_TARGET2
  --fix-v4bx                  Rewrite BX rn as MOV pc, rn for ARMv4
  --fix-v4bx-interworking     Rewrite BX rn branch to ARMv4 interworking veneer
  --use-blx                   Enable use of BLX instructions
  --vfp11-denorm-fix          Specify how to fix VFP11 denorm erratum
  --fix-stm32l4xx-629360      Specify how to fix STM32L4XX 629360 erratum
  --no-enum-size-warning      Don't warn about objects with incompatible
                                enum sizes
  --no-wchar-size-warning     Don't warn about objects with incompatible
                                wchar_t sizes
  --pic-veneer                Always generate PIC interworking veneers
  --long-plt                  Generate long .plt entries
                              to handle large .plt/.got displacements
  --cmse-implib               Make import library to be a secure gateway import
                                library as per ARMv8-M Security Extensions
  --in-implib                 Import library whose symbols address must
                                remain stable
  --stub-group-size=N         Maximum size of a group of input sections that
                                can be handled by one stub section.  A negative
                                value locates all stubs after their branches
                                (with a group size of -N), while a positive
                                value allows two groups of input sections, one
                                before, and one after each stub section.
                                Values of +/-1 indicate the linker should
                                choose suitable defaults.
  --[no-]fix-cortex-a8        Disable/enable Cortex-A8 Thumb-2 branch erratum fix
  --no-merge-exidx-entries    Disable merging exidx entries
  --[no-]fix-arm1176          Disable/enable ARM1176 BLX immediate erratum fix
armelf_vxworks: 
  --thumb-entry=<sym>         Set the entry point to be Thumb symbol <sym>
  --be8                       Output BE8 format image
  --target1-rel               Interpret R_ARM_TARGET1 as R_ARM_REL32
  --target1-abs               Interpret R_ARM_TARGET1 as R_ARM_ABS32
  --target2=<type>            Specify definition of R_ARM_TARGET2
  --fix-v4bx                  Rewrite BX rn as MOV pc, rn for ARMv4
  --fix-v4bx-interworking     Rewrite BX rn branch to ARMv4 interworking veneer
  --use-blx                   Enable use of BLX instructions
  --vfp11-denorm-fix          Specify how to fix VFP11 denorm erratum
  --fix-stm32l4xx-629360      Specify how to fix STM32L4XX 629360 erratum
  --no-enum-size-warning      Don't warn about objects with incompatible
                                enum sizes
  --no-wchar-size-warning     Don't warn about objects with incompatible
                                wchar_t sizes
  --pic-veneer                Always generate PIC interworking veneers
  --long-plt                  Generate long .plt entries
                              to handle large .plt/.got displacements
  --cmse-implib               Make import library to be a secure gateway import
                                library as per ARMv8-M Security Extensions
  --in-implib                 Import library whose symbols address must
                                remain stable
  --stub-group-size=N         Maximum size of a group of input sections that
                                can be handled by one stub section.  A negative
                                value locates all stubs after their branches
                                (with a group size of -N), while a positive
                                value allows two groups of input sections, one
                                before, and one after each stub section.
                                Values of +/-1 indicate the linker should
                                choose suitable defaults.
  --[no-]fix-cortex-a8        Disable/enable Cortex-A8 Thumb-2 branch erratum fix
  --no-merge-exidx-entries    Disable merging exidx entries
  --[no-]fix-arm1176          Disable/enable ARM1176 BLX immediate erratum fix
  --force-dynamic             Always create dynamic sections
armelfb: 
  --thumb-entry=<sym>         Set the entry point to be Thumb symbol <sym>
  --be8                       Output BE8 format image
  --target1-rel               Interpret R_ARM_TARGET1 as R_ARM_REL32
  --target1-abs               Interpret R_ARM_TARGET1 as R_ARM_ABS32
  --target2=<type>            Specify definition of R_ARM_TARGET2
  --fix-v4bx                  Rewrite BX rn as MOV pc, rn for ARMv4
  --fix-v4bx-interworking     Rewrite BX rn branch to ARMv4 interworking veneer
  --use-blx                   Enable use of BLX instructions
  --vfp11-denorm-fix          Specify how to fix VFP11 denorm erratum
  --fix-stm32l4xx-629360      Specify how to fix STM32L4XX 629360 erratum
  --no-enum-size-warning      Don't warn about objects with incompatible
                                enum sizes
  --no-wchar-size-warning     Don't warn about objects with incompatible
                                wchar_t sizes
  --pic-veneer                Always generate PIC interworking veneers
  --long-plt                  Generate long .plt entries
                              to handle large .plt/.got displacements
  --cmse-implib               Make import library to be a secure gateway import
                                library as per ARMv8-M Security Extensions
  --in-implib                 Import library whose symbols address must
                                remain stable
  --stub-group-size=N         Maximum size of a group of input sections that
                                can be handled by one stub section.  A negative
                                value locates all stubs after their branches
                                (with a group size of -N), while a positive
                                value allows two groups of input sections, one
                                before, and one after each stub section.
                                Values of +/-1 indicate the linker should
                                choose suitable defaults.
  --[no-]fix-cortex-a8        Disable/enable Cortex-A8 Thumb-2 branch erratum fix
  --no-merge-exidx-entries    Disable merging exidx entries
  --[no-]fix-arm1176          Disable/enable ARM1176 BLX immediate erratum fix
armelfb_fbsd: 
  --thumb-entry=<sym>         Set the entry point to be Thumb symbol <sym>
  --be8                       Output BE8 format image
  --target1-rel               Interpret R_ARM_TARGET1 as R_ARM_REL32
  --target1-abs               Interpret R_ARM_TARGET1 as R_ARM_ABS32
  --target2=<type>            Specify definition of R_ARM_TARGET2
  --fix-v4bx                  Rewrite BX rn as MOV pc, rn for ARMv4
  --fix-v4bx-interworking     Rewrite BX rn branch to ARMv4 interworking veneer
  --use-blx                   Enable use of BLX instructions
  --vfp11-denorm-fix          Specify how to fix VFP11 denorm erratum
  --fix-stm32l4xx-629360      Specify how to fix STM32L4XX 629360 erratum
  --no-enum-size-warning      Don't warn about objects with incompatible
                                enum sizes
  --no-wchar-size-warning     Don't warn about objects with incompatible
                                wchar_t sizes
  --pic-veneer                Always generate PIC interworking veneers
  --long-plt                  Generate long .plt entries
                              to handle large .plt/.got displacements
  --cmse-implib               Make import library to be a secure gateway import
                                library as per ARMv8-M Security Extensions
  --in-implib                 Import library whose symbols address must
                                remain stable
  --stub-group-size=N         Maximum size of a group of input sections that
                                can be handled by one stub section.  A negative
                                value locates all stubs after their branches
                                (with a group size of -N), while a positive
                                value allows two groups of input sections, one
                                before, and one after each stub section.
                                Values of +/-1 indicate the linker should
                                choose suitable defaults.
  --[no-]fix-cortex-a8        Disable/enable Cortex-A8 Thumb-2 branch erratum fix
  --no-merge-exidx-entries    Disable merging exidx entries
  --[no-]fix-arm1176          Disable/enable ARM1176 BLX immediate erratum fix
armelfb_fuchsia: 
  --thumb-entry=<sym>         Set the entry point to be Thumb symbol <sym>
  --be8                       Output BE8 format image
  --target1-rel               Interpret R_ARM_TARGET1 as R_ARM_REL32
  --target1-abs               Interpret R_ARM_TARGET1 as R_ARM_ABS32
  --target2=<type>            Specify definition of R_ARM_TARGET2
  --fix-v4bx                  Rewrite BX rn as MOV pc, rn for ARMv4
  --fix-v4bx-interworking     Rewrite BX rn branch to ARMv4 interworking veneer
  --use-blx                   Enable use of BLX instructions
  --vfp11-denorm-fix          Specify how to fix VFP11 denorm erratum
  --fix-stm32l4xx-629360      Specify how to fix STM32L4XX 629360 erratum
  --no-enum-size-warning      Don't warn about objects with incompatible
                                enum sizes
  --no-wchar-size-warning     Don't warn about objects with incompatible
                                wchar_t sizes
  --pic-veneer                Always generate PIC interworking veneers
  --long-plt                  Generate long .plt entries
                              to handle large .plt/.got displacements
  --cmse-implib               Make import library to be a secure gateway import
                                library as per ARMv8-M Security Extensions
  --in-implib                 Import library whose symbols address must
                                remain stable
  --stub-group-size=N         Maximum size of a group of input sections that
                                can be handled by one stub section.  A negative
                                value locates all stubs after their branches
                                (with a group size of -N), while a positive
                                value allows two groups of input sections, one
                                before, and one after each stub section.
                                Values of +/-1 indicate the linker should
                                choose suitable defaults.
  --[no-]fix-cortex-a8        Disable/enable Cortex-A8 Thumb-2 branch erratum fix
  --no-merge-exidx-entries    Disable merging exidx entries
  --[no-]fix-arm1176          Disable/enable ARM1176 BLX immediate erratum fix
armelfb_linux: 
  --thumb-entry=<sym>         Set the entry point to be Thumb symbol <sym>
  --be8                       Output BE8 format image
  --target1-rel               Interpret R_ARM_TARGET1 as R_ARM_REL32
  --target1-abs               Interpret R_ARM_TARGET1 as R_ARM_ABS32
  --target2=<type>            Specify definition of R_ARM_TARGET2
  --fix-v4bx                  Rewrite BX rn as MOV pc, rn for ARMv4
  --fix-v4bx-interworking     Rewrite BX rn branch to ARMv4 interworking veneer
  --use-blx                   Enable use of BLX instructions
  --vfp11-denorm-fix          Specify how to fix VFP11 denorm erratum
  --fix-stm32l4xx-629360      Specify how to fix STM32L4XX 629360 erratum
  --no-enum-size-warning      Don't warn about objects with incompatible
                                enum sizes
  --no-wchar-size-warning     Don't warn about objects with incompatible
                                wchar_t sizes
  --pic-veneer                Always generate PIC interworking veneers
  --long-plt                  Generate long .plt entries
                              to handle large .plt/.got displacements
  --cmse-implib               Make import library to be a secure gateway import
                                library as per ARMv8-M Security Extensions
  --in-implib                 Import library whose symbols address must
                                remain stable
  --stub-group-size=N         Maximum size of a group of input sections that
                                can be handled by one stub section.  A negative
                                value locates all stubs after their branches
                                (with a group size of -N), while a positive
                                value allows two groups of input sections, one
                                before, and one after each stub section.
                                Values of +/-1 indicate the linker should
                                choose suitable defaults.
  --[no-]fix-cortex-a8        Disable/enable Cortex-A8 Thumb-2 branch erratum fix
  --no-merge-exidx-entries    Disable merging exidx entries
  --[no-]fix-arm1176          Disable/enable ARM1176 BLX immediate erratum fix
armelfb_linux_eabi: 
  --thumb-entry=<sym>         Set the entry point to be Thumb symbol <sym>
  --be8                       Output BE8 format image
  --target1-rel               Interpret R_ARM_TARGET1 as R_ARM_REL32
  --target1-abs               Interpret R_ARM_TARGET1 as R_ARM_ABS32
  --target2=<type>            Specify definition of R_ARM_TARGET2
  --fix-v4bx                  Rewrite BX rn as MOV pc, rn for ARMv4
  --fix-v4bx-interworking     Rewrite BX rn branch to ARMv4 interworking veneer
  --use-blx                   Enable use of BLX instructions
  --vfp11-denorm-fix          Specify how to fix VFP11 denorm erratum
  --fix-stm32l4xx-629360      Specify how to fix STM32L4XX 629360 erratum
  --no-enum-size-warning      Don't warn about objects with incompatible
                                enum sizes
  --no-wchar-size-warning     Don't warn about objects with incompatible
                                wchar_t sizes
  --pic-veneer                Always generate PIC interworking veneers
  --long-plt                  Generate long .plt entries
                              to handle large .plt/.got displacements
  --cmse-implib               Make import library to be a secure gateway import
                                library as per ARMv8-M Security Extensions
  --in-implib                 Import library whose symbols address must
                                remain stable
  --stub-group-size=N         Maximum size of a group of input sections that
                                can be handled by one stub section.  A negative
                                value locates all stubs after their branches
                                (with a group size of -N), while a positive
                                value allows two groups of input sections, one
                                before, and one after each stub section.
                                Values of +/-1 indicate the linker should
                                choose suitable defaults.
  --[no-]fix-cortex-a8        Disable/enable Cortex-A8 Thumb-2 branch erratum fix
  --no-merge-exidx-entries    Disable merging exidx entries
  --[no-]fix-arm1176          Disable/enable ARM1176 BLX immediate erratum fix
armelfb_linux_fdpiceabi: 
  --thumb-entry=<sym>         Set the entry point to be Thumb symbol <sym>
  --be8                       Output BE8 format image
  --target1-rel               Interpret R_ARM_TARGET1 as R_ARM_REL32
  --target1-abs               Interpret R_ARM_TARGET1 as R_ARM_ABS32
  --target2=<type>            Specify definition of R_ARM_TARGET2
  --fix-v4bx                  Rewrite BX rn as MOV pc, rn for ARMv4
  --fix-v4bx-interworking     Rewrite BX rn branch to ARMv4 interworking veneer
  --use-blx                   Enable use of BLX instructions
  --vfp11-denorm-fix          Specify how to fix VFP11 denorm erratum
  --fix-stm32l4xx-629360      Specify how to fix STM32L4XX 629360 erratum
  --no-enum-size-warning      Don't warn about objects with incompatible
                                enum sizes
  --no-wchar-size-warning     Don't warn about objects with incompatible
                                wchar_t sizes
  --pic-veneer                Always generate PIC interworking veneers
  --long-plt                  Generate long .plt entries
                              to handle large .plt/.got displacements
  --cmse-implib               Make import library to be a secure gateway import
                                library as per ARMv8-M Security Extensions
  --in-implib                 Import library whose symbols address must
                                remain stable
  --stub-group-size=N         Maximum size of a group of input sections that
                                can be handled by one stub section.  A negative
                                value locates all stubs after their branches
                                (with a group size of -N), while a positive
                                value allows two groups of input sections, one
                                before, and one after each stub section.
                                Values of +/-1 indicate the linker should
                                choose suitable defaults.
  --[no-]fix-cortex-a8        Disable/enable Cortex-A8 Thumb-2 branch erratum fix
  --no-merge-exidx-entries    Disable merging exidx entries
  --[no-]fix-arm1176          Disable/enable ARM1176 BLX immediate erratum fix
armelfb_nacl: 
  --thumb-entry=<sym>         Set the entry point to be Thumb symbol <sym>
  --be8                       Output BE8 format image
  --target1-rel               Interpret R_ARM_TARGET1 as R_ARM_REL32
  --target1-abs               Interpret R_ARM_TARGET1 as R_ARM_ABS32
  --target2=<type>            Specify definition of R_ARM_TARGET2
  --fix-v4bx                  Rewrite BX rn as MOV pc, rn for ARMv4
  --fix-v4bx-interworking     Rewrite BX rn branch to ARMv4 interworking veneer
  --use-blx                   Enable use of BLX instructions
  --vfp11-denorm-fix          Specify how to fix VFP11 denorm erratum
  --fix-stm32l4xx-629360      Specify how to fix STM32L4XX 629360 erratum
  --no-enum-size-warning      Don't warn about objects with incompatible
                                enum sizes
  --no-wchar-size-warning     Don't warn about objects with incompatible
                                wchar_t sizes
  --pic-veneer                Always generate PIC interworking veneers
  --long-plt                  Generate long .plt entries
                              to handle large .plt/.got displacements
  --cmse-implib               Make import library to be a secure gateway import
                                library as per ARMv8-M Security Extensions
  --in-implib                 Import library whose symbols address must
                                remain stable
  --stub-group-size=N         Maximum size of a group of input sections that
                                can be handled by one stub section.  A negative
                                value locates all stubs after their branches
                                (with a group size of -N), while a positive
                                value allows two groups of input sections, one
                                before, and one after each stub section.
                                Values of +/-1 indicate the linker should
                                choose suitable defaults.
  --[no-]fix-cortex-a8        Disable/enable Cortex-A8 Thumb-2 branch erratum fix
  --no-merge-exidx-entries    Disable merging exidx entries
  --[no-]fix-arm1176          Disable/enable ARM1176 BLX immediate erratum fix
armelfb_nbsd: 
  --thumb-entry=<sym>         Set the entry point to be Thumb symbol <sym>
  --be8                       Output BE8 format image
  --target1-rel               Interpret R_ARM_TARGET1 as R_ARM_REL32
  --target1-abs               Interpret R_ARM_TARGET1 as R_ARM_ABS32
  --target2=<type>            Specify definition of R_ARM_TARGET2
  --fix-v4bx                  Rewrite BX rn as MOV pc, rn for ARMv4
  --fix-v4bx-interworking     Rewrite BX rn branch to ARMv4 interworking veneer
  --use-blx                   Enable use of BLX instructions
  --vfp11-denorm-fix          Specify how to fix VFP11 denorm erratum
  --fix-stm32l4xx-629360      Specify how to fix STM32L4XX 629360 erratum
  --no-enum-size-warning      Don't warn about objects with incompatible
                                enum sizes
  --no-wchar-size-warning     Don't warn about objects with incompatible
                                wchar_t sizes
  --pic-veneer                Always generate PIC interworking veneers
  --long-plt                  Generate long .plt entries
                              to handle large .plt/.got displacements
  --cmse-implib               Make import library to be a secure gateway import
                                library as per ARMv8-M Security Extensions
  --in-implib                 Import library whose symbols address must
                                remain stable
  --stub-group-size=N         Maximum size of a group of input sections that
                                can be handled by one stub section.  A negative
                                value locates all stubs after their branches
                                (with a group size of -N), while a positive
                                value allows two groups of input sections, one
                                before, and one after each stub section.
                                Values of +/-1 indicate the linker should
                                choose suitable defaults.
  --[no-]fix-cortex-a8        Disable/enable Cortex-A8 Thumb-2 branch erratum fix
  --no-merge-exidx-entries    Disable merging exidx entries
  --[no-]fix-arm1176          Disable/enable ARM1176 BLX immediate erratum fix
armnto: 
  --thumb-entry=<sym>         Set the entry point to be Thumb symbol <sym>
  --be8                       Output BE8 format image
  --target1-rel               Interpret R_ARM_TARGET1 as R_ARM_REL32
  --target1-abs               Interpret R_ARM_TARGET1 as R_ARM_ABS32
  --target2=<type>            Specify definition of R_ARM_TARGET2
  --fix-v4bx                  Rewrite BX rn as MOV pc, rn for ARMv4
  --fix-v4bx-interworking     Rewrite BX rn branch to ARMv4 interworking veneer
  --use-blx                   Enable use of BLX instructions
  --vfp11-denorm-fix          Specify how to fix VFP11 denorm erratum
  --fix-stm32l4xx-629360      Specify how to fix STM32L4XX 629360 erratum
  --no-enum-size-warning      Don't warn about objects with incompatible
                                enum sizes
  --no-wchar-size-warning     Don't warn about objects with incompatible
                                wchar_t sizes
  --pic-veneer                Always generate PIC interworking veneers
  --long-plt                  Generate long .plt entries
                              to handle large .plt/.got displacements
  --cmse-implib               Make import library to be a secure gateway import
                                library as per ARMv8-M Security Extensions
  --in-implib                 Import library whose symbols address must
                                remain stable
  --stub-group-size=N         Maximum size of a group of input sections that
                                can be handled by one stub section.  A negative
                                value locates all stubs after their branches
                                (with a group size of -N), while a positive
                                value allows two groups of input sections, one
                                before, and one after each stub section.
                                Values of +/-1 indicate the linker should
                                choose suitable defaults.
  --[no-]fix-cortex-a8        Disable/enable Cortex-A8 Thumb-2 branch erratum fix
  --no-merge-exidx-entries    Disable merging exidx entries
  --[no-]fix-arm1176          Disable/enable ARM1176 BLX immediate erratum fix
armpe: 
  --base_file <basefile>             Generate a base file for relocatable DLLs
  --dll                              Set image base to the default for DLLs
  --file-alignment <size>            Set file alignment
  --heap <size>                      Set initial size of the heap
  --image-base <address>             Set start address of the executable
  --major-image-version <number>     Set version number of the executable
  --major-os-version <number>        Set minimum required OS version
  --major-subsystem-version <number> Set minimum required OS subsystem version
  --minor-image-version <number>     Set revision number of the executable
  --minor-os-version <number>        Set minimum required OS revision
  --minor-subsystem-version <number> Set minimum required OS subsystem revision
  --section-alignment <size>         Set section alignment
  --stack <size>                     Set size of the initial stack
  --subsystem <name>[:<version>]     Set required OS subsystem [& version]
  --support-old-code                 Support interworking with old code
  --[no-]leading-underscore          Set explicit symbol underscore prefix mode
  --thumb-entry=<symbol>             Set the entry point to be Thumb <symbol>
  --[no-]insert-timestamp            Use a real timestamp rather than zero (default).
                                     This makes binaries non-deterministic
  --add-stdcall-alias                Export symbols with and without @nn
  --disable-stdcall-fixup            Don't link _sym to _sym@nn
  --enable-stdcall-fixup             Link _sym to _sym@nn without warnings
  --exclude-symbols sym,sym,...      Exclude symbols from automatic export
  --exclude-all-symbols              Exclude all symbols from automatic export
  --exclude-libs lib,lib,...         Exclude libraries from automatic export
  --exclude-modules-for-implib mod,mod,...
                                     Exclude objects, archive members from auto
                                     export, place into import library instead.
  --export-all-symbols               Automatically export all globals to DLL
  --kill-at                          Remove @nn from exported symbols
  --output-def <file>                Generate a .DEF file for the built DLL
  --warn-duplicate-exports           Warn about duplicate exports
  --compat-implib                    Create backward compatible import libs;
                                       create __imp_<SYMBOL> as well.
  --enable-auto-image-base[=<address>] Automatically choose image base for DLLs
                                       (optionally starting with address) unless
                                       specifically set with --image-base
  --disable-auto-image-base          Do not auto-choose image base. (default)
  --dll-search-prefix=<string>       When linking dynamically to a dll without
                                       an importlib, use <string><basename>.dll
                                       in preference to lib<basename>.dll 
  --enable-auto-import               Do sophisticated linking of _sym to
                                       __imp_sym for DATA references
  --disable-auto-import              Do not auto-import DATA items from DLLs
  --enable-runtime-pseudo-reloc      Work around auto-import limitations by
                                       adding pseudo-relocations resolved at
                                       runtime.
  --disable-runtime-pseudo-reloc     Do not add runtime pseudo-relocations for
                                       auto-imported DATA.
  --enable-extra-pe-debug            Enable verbose debug output when building
                                       or linking to DLLs (esp. auto-import)
  --large-address-aware              Executable supports virtual addresses
                                       greater than 2 gigabytes
  --disable-large-address-aware      Executable does not support virtual
                                       addresses greater than 2 gigabytes
  --enable-long-section-names        Use long COFF section names even in
                                       executable image files
  --disable-long-section-names       Never use long COFF section names, even
                                       in object files
  --dynamicbase                      Image base address may be relocated using
                                       address space layout randomization (ASLR)
  --enable-reloc-section             Create the base relocation table
  --forceinteg               Code integrity checks are enforced
  --nxcompat                 Image is compatible with data execution prevention
  --no-isolation             Image understands isolation but do not isolate the image
  --no-seh                   Image does not use SEH. No SE handler may
                                       be called in this image
  --no-bind                  Do not bind this image
  --wdmdriver                Driver uses the WDM model
  --tsaware                  Image is Terminal Server aware
  --build-id[=STYLE]         Generate build ID
armsymbian: 
  --thumb-entry=<sym>         Set the entry point to be Thumb symbol <sym>
  --be8                       Output BE8 format image
  --target1-rel               Interpret R_ARM_TARGET1 as R_ARM_REL32
  --target1-abs               Interpret R_ARM_TARGET1 as R_ARM_ABS32
  --target2=<type>            Specify definition of R_ARM_TARGET2
  --fix-v4bx                  Rewrite BX rn as MOV pc, rn for ARMv4
  --fix-v4bx-interworking     Rewrite BX rn branch to ARMv4 interworking veneer
  --use-blx                   Enable use of BLX instructions
  --vfp11-denorm-fix          Specify how to fix VFP11 denorm erratum
  --fix-stm32l4xx-629360      Specify how to fix STM32L4XX 629360 erratum
  --no-enum-size-warning      Don't warn about objects with incompatible
                                enum sizes
  --no-wchar-size-warning     Don't warn about objects with incompatible
                                wchar_t sizes
  --pic-veneer                Always generate PIC interworking veneers
  --long-plt                  Generate long .plt entries
                              to handle large .plt/.got displacements
  --cmse-implib               Make import library to be a secure gateway import
                                library as per ARMv8-M Security Extensions
  --in-implib                 Import library whose symbols address must
                                remain stable
  --stub-group-size=N         Maximum size of a group of input sections that
                                can be handled by one stub section.  A negative
                                value locates all stubs after their branches
                                (with a group size of -N), while a positive
                                value allows two groups of input sections, one
                                before, and one after each stub section.
                                Values of +/-1 indicate the linker should
                                choose suitable defaults.
  --[no-]fix-cortex-a8        Disable/enable Cortex-A8 Thumb-2 branch erratum fix
  --no-merge-exidx-entries    Disable merging exidx entries
  --[no-]fix-arm1176          Disable/enable ARM1176 BLX immediate erratum fix
avr1: 
  --pmem-wrap-around=<val>    Make the linker relaxation machine assume that a
                                program counter wrap-around occurs at address
                                <val>.  Supported values: 8k, 16k, 32k and 64k.
  --no-call-ret-replacement   The relaxation machine normally will
                                substitute two immediately following call/ret
                                instructions by a single jump instruction.
                                This option disables this optimization.
  --no-stubs                  If the linker detects to attempt to access
                                an instruction beyond 128k by a reloc that
                                is limited to 128k max, it inserts a jump
                                stub. You can de-active this with this switch.
  --debug-stubs               Used for debugging avr-ld.
  --debug-relax               Used for debugging avr-ld.
avr2: 
  --pmem-wrap-around=<val>    Make the linker relaxation machine assume that a
                                program counter wrap-around occurs at address
                                <val>.  Supported values: 8k, 16k, 32k and 64k.
  --no-call-ret-replacement   The relaxation machine normally will
                                substitute two immediately following call/ret
                                instructions by a single jump instruction.
                                This option disables this optimization.
  --no-stubs                  If the linker detects to attempt to access
                                an instruction beyond 128k by a reloc that
                                is limited to 128k max, it inserts a jump
                                stub. You can de-active this with this switch.
  --debug-stubs               Used for debugging avr-ld.
  --debug-relax               Used for debugging avr-ld.
avr25: 
  --pmem-wrap-around=<val>    Make the linker relaxation machine assume that a
                                program counter wrap-around occurs at address
                                <val>.  Supported values: 8k, 16k, 32k and 64k.
  --no-call-ret-replacement   The relaxation machine normally will
                                substitute two immediately following call/ret
                                instructions by a single jump instruction.
                                This option disables this optimization.
  --no-stubs                  If the linker detects to attempt to access
                                an instruction beyond 128k by a reloc that
                                is limited to 128k max, it inserts a jump
                                stub. You can de-active this with this switch.
  --debug-stubs               Used for debugging avr-ld.
  --debug-relax               Used for debugging avr-ld.
avr3: 
  --pmem-wrap-around=<val>    Make the linker relaxation machine assume that a
                                program counter wrap-around occurs at address
                                <val>.  Supported values: 8k, 16k, 32k and 64k.
  --no-call-ret-replacement   The relaxation machine normally will
                                substitute two immediately following call/ret
                                instructions by a single jump instruction.
                                This option disables this optimization.
  --no-stubs                  If the linker detects to attempt to access
                                an instruction beyond 128k by a reloc that
                                is limited to 128k max, it inserts a jump
                                stub. You can de-active this with this switch.
  --debug-stubs               Used for debugging avr-ld.
  --debug-relax               Used for debugging avr-ld.
avr31: 
  --pmem-wrap-around=<val>    Make the linker relaxation machine assume that a
                                program counter wrap-around occurs at address
                                <val>.  Supported values: 8k, 16k, 32k and 64k.
  --no-call-ret-replacement   The relaxation machine normally will
                                substitute two immediately following call/ret
                                instructions by a single jump instruction.
                                This option disables this optimization.
  --no-stubs                  If the linker detects to attempt to access
                                an instruction beyond 128k by a reloc that
                                is limited to 128k max, it inserts a jump
                                stub. You can de-active this with this switch.
  --debug-stubs               Used for debugging avr-ld.
  --debug-relax               Used for debugging avr-ld.
avr35: 
  --pmem-wrap-around=<val>    Make the linker relaxation machine assume that a
                                program counter wrap-around occurs at address
                                <val>.  Supported values: 8k, 16k, 32k and 64k.
  --no-call-ret-replacement   The relaxation machine normally will
                                substitute two immediately following call/ret
                                instructions by a single jump instruction.
                                This option disables this optimization.
  --no-stubs                  If the linker detects to attempt to access
                                an instruction beyond 128k by a reloc that
                                is limited to 128k max, it inserts a jump
                                stub. You can de-active this with this switch.
  --debug-stubs               Used for debugging avr-ld.
  --debug-relax               Used for debugging avr-ld.
avr4: 
  --pmem-wrap-around=<val>    Make the linker relaxation machine assume that a
                                program counter wrap-around occurs at address
                                <val>.  Supported values: 8k, 16k, 32k and 64k.
  --no-call-ret-replacement   The relaxation machine normally will
                                substitute two immediately following call/ret
                                instructions by a single jump instruction.
                                This option disables this optimization.
  --no-stubs                  If the linker detects to attempt to access
                                an instruction beyond 128k by a reloc that
                                is limited to 128k max, it inserts a jump
                                stub. You can de-active this with this switch.
  --debug-stubs               Used for debugging avr-ld.
  --debug-relax               Used for debugging avr-ld.
avr5: 
  --pmem-wrap-around=<val>    Make the linker relaxation machine assume that a
                                program counter wrap-around occurs at address
                                <val>.  Supported values: 8k, 16k, 32k and 64k.
  --no-call-ret-replacement   The relaxation machine normally will
                                substitute two immediately following call/ret
                                instructions by a single jump instruction.
                                This option disables this optimization.
  --no-stubs                  If the linker detects to attempt to access
                                an instruction beyond 128k by a reloc that
                                is limited to 128k max, it inserts a jump
                                stub. You can de-active this with this switch.
  --debug-stubs               Used for debugging avr-ld.
  --debug-relax               Used for debugging avr-ld.
avr51: 
  --pmem-wrap-around=<val>    Make the linker relaxation machine assume that a
                                program counter wrap-around occurs at address
                                <val>.  Supported values: 8k, 16k, 32k and 64k.
  --no-call-ret-replacement   The relaxation machine normally will
                                substitute two immediately following call/ret
                                instructions by a single jump instruction.
                                This option disables this optimization.
  --no-stubs                  If the linker detects to attempt to access
                                an instruction beyond 128k by a reloc that
                                is limited to 128k max, it inserts a jump
                                stub. You can de-active this with this switch.
  --debug-stubs               Used for debugging avr-ld.
  --debug-relax               Used for debugging avr-ld.
avr6: 
  --pmem-wrap-around=<val>    Make the linker relaxation machine assume that a
                                program counter wrap-around occurs at address
                                <val>.  Supported values: 8k, 16k, 32k and 64k.
  --no-call-ret-replacement   The relaxation machine normally will
                                substitute two immediately following call/ret
                                instructions by a single jump instruction.
                                This option disables this optimization.
  --no-stubs                  If the linker detects to attempt to access
                                an instruction beyond 128k by a reloc that
                                is limited to 128k max, it inserts a jump
                                stub. You can de-active this with this switch.
  --debug-stubs               Used for debugging avr-ld.
  --debug-relax               Used for debugging avr-ld.
avrxmega1: 
  --pmem-wrap-around=<val>    Make the linker relaxation machine assume that a
                                program counter wrap-around occurs at address
                                <val>.  Supported values: 8k, 16k, 32k and 64k.
  --no-call-ret-replacement   The relaxation machine normally will
                                substitute two immediately following call/ret
                                instructions by a single jump instruction.
                                This option disables this optimization.
  --no-stubs                  If the linker detects to attempt to access
                                an instruction beyond 128k by a reloc that
                                is limited to 128k max, it inserts a jump
                                stub. You can de-active this with this switch.
  --debug-stubs               Used for debugging avr-ld.
  --debug-relax               Used for debugging avr-ld.
avrxmega2: 
  --pmem-wrap-around=<val>    Make the linker relaxation machine assume that a
                                program counter wrap-around occurs at address
                                <val>.  Supported values: 8k, 16k, 32k and 64k.
  --no-call-ret-replacement   The relaxation machine normally will
                                substitute two immediately following call/ret
                                instructions by a single jump instruction.
                                This option disables this optimization.
  --no-stubs                  If the linker detects to attempt to access
                                an instruction beyond 128k by a reloc that
                                is limited to 128k max, it inserts a jump
                                stub. You can de-active this with this switch.
  --debug-stubs               Used for debugging avr-ld.
  --debug-relax               Used for debugging avr-ld.
avrxmega3: 
  --pmem-wrap-around=<val>    Make the linker relaxation machine assume that a
                                program counter wrap-around occurs at address
                                <val>.  Supported values: 8k, 16k, 32k and 64k.
  --no-call-ret-replacement   The relaxation machine normally will
                                substitute two immediately following call/ret
                                instructions by a single jump instruction.
                                This option disables this optimization.
  --no-stubs                  If the linker detects to attempt to access
                                an instruction beyond 128k by a reloc that
                                is limited to 128k max, it inserts a jump
                                stub. You can de-active this with this switch.
  --debug-stubs               Used for debugging avr-ld.
  --debug-relax               Used for debugging avr-ld.
avrxmega4: 
  --pmem-wrap-around=<val>    Make the linker relaxation machine assume that a
                                program counter wrap-around occurs at address
                                <val>.  Supported values: 8k, 16k, 32k and 64k.
  --no-call-ret-replacement   The relaxation machine normally will
                                substitute two immediately following call/ret
                                instructions by a single jump instruction.
                                This option disables this optimization.
  --no-stubs                  If the linker detects to attempt to access
                                an instruction beyond 128k by a reloc that
                                is limited to 128k max, it inserts a jump
                                stub. You can de-active this with this switch.
  --debug-stubs               Used for debugging avr-ld.
  --debug-relax               Used for debugging avr-ld.
avrxmega5: 
  --pmem-wrap-around=<val>    Make the linker relaxation machine assume that a
                                program counter wrap-around occurs at address
                                <val>.  Supported values: 8k, 16k, 32k and 64k.
  --no-call-ret-replacement   The relaxation machine normally will
                                substitute two immediately following call/ret
                                instructions by a single jump instruction.
                                This option disables this optimization.
  --no-stubs                  If the linker detects to attempt to access
                                an instruction beyond 128k by a reloc that
                                is limited to 128k max, it inserts a jump
                                stub. You can de-active this with this switch.
  --debug-stubs               Used for debugging avr-ld.
  --debug-relax               Used for debugging avr-ld.
avrxmega6: 
  --pmem-wrap-around=<val>    Make the linker relaxation machine assume that a
                                program counter wrap-around occurs at address
                                <val>.  Supported values: 8k, 16k, 32k and 64k.
  --no-call-ret-replacement   The relaxation machine normally will
                                substitute two immediately following call/ret
                                instructions by a single jump instruction.
                                This option disables this optimization.
  --no-stubs                  If the linker detects to attempt to access
                                an instruction beyond 128k by a reloc that
                                is limited to 128k max, it inserts a jump
                                stub. You can de-active this with this switch.
  --debug-stubs               Used for debugging avr-ld.
  --debug-relax               Used for debugging avr-ld.
avrxmega7: 
  --pmem-wrap-around=<val>    Make the linker relaxation machine assume that a
                                program counter wrap-around occurs at address
                                <val>.  Supported values: 8k, 16k, 32k and 64k.
  --no-call-ret-replacement   The relaxation machine normally will
                                substitute two immediately following call/ret
                                instructions by a single jump instruction.
                                This option disables this optimization.
  --no-stubs                  If the linker detects to attempt to access
                                an instruction beyond 128k by a reloc that
                                is limited to 128k max, it inserts a jump
                                stub. You can de-active this with this switch.
  --debug-stubs               Used for debugging avr-ld.
  --debug-relax               Used for debugging avr-ld.
avrtiny: 
  --pmem-wrap-around=<val>    Make the linker relaxation machine assume that a
                                program counter wrap-around occurs at address
                                <val>.  Supported values: 8k, 16k, 32k and 64k.
  --no-call-ret-replacement   The relaxation machine normally will
                                substitute two immediately following call/ret
                                instructions by a single jump instruction.
                                This option disables this optimization.
  --no-stubs                  If the linker detects to attempt to access
                                an instruction beyond 128k by a reloc that
                                is limited to 128k max, it inserts a jump
                                stub. You can de-active this with this switch.
  --debug-stubs               Used for debugging avr-ld.
  --debug-relax               Used for debugging avr-ld.
cskyelf: 
  --[no-]branch-stub
			Disable/enable use of stubs to expand branch instructions that cannot reach the target.
  --stub-group-size=N
			Maximum size of a group of input sections handled by one stub section.cskyelf_linux: 
  --[no-]branch-stub
			Disable/enable use of stubs to expand branch instructions that cannot reach the target.
  --stub-group-size=N
			Maximum size of a group of input sections handled by one stub section.elf32_sparc_vxworks: 
  --force-dynamic             Always create dynamic sections
elf32_spu: 
  --plugin                    Make SPU plugin
  --no-overlays               No overlay handling
  --compact-stubs             Use smaller and possibly slower call stubs
  --emit-stub-syms            Add symbols on overlay call stubs
  --extra-overlay-stubs       Add stubs on all calls out of overlay regions
  --local-store=lo:hi         Valid address range
  --stack-analysis            Estimate maximum stack requirement
  --emit-stack-syms           Add sym giving stack needed for each func
  --auto-overlay [=filename]  Create an overlay script in filename if
                                executable does not fit in local store
  --auto-relink               Rerun linker using auto-overlay script
  --overlay-rodata            Place read-only data with associated function
                                code in overlays
  --num-regions               Number of overlay buffers (default 1)
  --region-size               Size of overlay buffers (default 0, auto)
  --fixed-space=bytes         Local store for non-overlay code and data
  --reserved-space=bytes      Local store for stack and heap.  If not specified
                                ld will estimate stack size and assume no heap
  --extra-stack-space=bytes   Space for negative sp access (default 2000) if
                                --reserved-space not given
  --soft-icache               Generate software icache overlays
  --num-lines                 Number of soft-icache lines (default 32)
  --line-size                 Size of soft-icache lines (default 1k)
  --non-ia-text               Allow non-icache code in icache lines
  --lrlive-analysis           Scan function prologue for lr liveness
elf32_tic6x_be: 
  --dsbt-index <index>    Use this as the DSBT index for the output object
  --dsbt-size <index>     Use this as the number of entries in the DSBT table
  --no-merge-exidx-entries
                          Disable merging exidx entries
elf32_tic6x_le: 
  --dsbt-index <index>    Use this as the DSBT index for the output object
  --dsbt-size <index>     Use this as the number of entries in the DSBT table
  --no-merge-exidx-entries
                          Disable merging exidx entries
elf32_tic6x_linux_be: 
  --dsbt-index <index>    Use this as the DSBT index for the output object
  --dsbt-size <index>     Use this as the number of entries in the DSBT table
  --no-merge-exidx-entries
                          Disable merging exidx entries
elf32_tic6x_linux_le: 
  --dsbt-index <index>    Use this as the DSBT index for the output object
  --dsbt-size <index>     Use this as the number of entries in the DSBT table
  --no-merge-exidx-entries
                          Disable merging exidx entries
elf32_tic6x_elf_be: 
  --dsbt-index <index>    Use this as the DSBT index for the output object
  --dsbt-size <index>     Use this as the number of entries in the DSBT table
  --no-merge-exidx-entries
                          Disable merging exidx entries
elf32_tic6x_elf_le: 
  --dsbt-index <index>    Use this as the DSBT index for the output object
  --dsbt-size <index>     Use this as the number of entries in the DSBT table
  --no-merge-exidx-entries
                          Disable merging exidx entries
elf32bfin: 
  --code-in-l1                Put code in L1
  --data-in-l1                Put data in L1
elf32bfinfd: 
  --code-in-l1                Put code in L1
  --data-in-l1                Put data in L1
elf32lppc: 
  -z dynamic-undefined-weak   Make undefined weak symbols dynamic
  -z nodynamic-undefined-weak Do not make undefined weak symbols dynamic
  --emit-stub-syms            Label linker stubs with a symbol
  --no-emit-stub-syms         Don't label linker stubs with a symbol
  --no-tls-optimize           Don't try to optimize TLS accesses
  --no-tls-get-addr-optimize  Don't use a special __tls_get_addr call
  --secure-plt                Use new-style PLT if possible
  --bss-plt                   Force old-style BSS PLT
  --plt-align                 Align PLT call stubs to fit cache lines
  --no-plt-align              Dont't align individual PLT call stubs
  --no-inline-optimize        Don't convert inline PLT to direct calls
  --sdata-got                 Force GOT location just before .sdata
  --ppc476-workaround [=pagesize]
                              Avoid a cache bug on ppc476
  --no-ppc476-workaround      Disable workaround
  --no-pic-fixup              Don't edit non-pic to pic
  --vle-reloc-fixup           Correct old object file 16A/16D relocation
elf32lppclinux: 
  -z dynamic-undefined-weak   Make undefined weak symbols dynamic
  -z nodynamic-undefined-weak Do not make undefined weak symbols dynamic
  --emit-stub-syms            Label linker stubs with a symbol
  --no-emit-stub-syms         Don't label linker stubs with a symbol
  --no-tls-optimize           Don't try to optimize TLS accesses
  --no-tls-get-addr-optimize  Don't use a special __tls_get_addr call
  --secure-plt                Use new-style PLT if possible
  --bss-plt                   Force old-style BSS PLT
  --plt-align                 Align PLT call stubs to fit cache lines
  --no-plt-align              Dont't align individual PLT call stubs
  --no-inline-optimize        Don't convert inline PLT to direct calls
  --sdata-got                 Force GOT location just before .sdata
  --ppc476-workaround [=pagesize]
                              Avoid a cache bug on ppc476
  --no-ppc476-workaround      Disable workaround
  --no-pic-fixup              Don't edit non-pic to pic
  --vle-reloc-fixup           Correct old object file 16A/16D relocation
elf32lppcnto: 
  -z dynamic-undefined-weak   Make undefined weak symbols dynamic
  -z nodynamic-undefined-weak Do not make undefined weak symbols dynamic
  --emit-stub-syms            Label linker stubs with a symbol
  --no-emit-stub-syms         Don't label linker stubs with a symbol
  --no-tls-optimize           Don't try to optimize TLS accesses
  --no-tls-get-addr-optimize  Don't use a special __tls_get_addr call
  --secure-plt                Use new-style PLT if possible
  --bss-plt                   Force old-style BSS PLT
  --plt-align                 Align PLT call stubs to fit cache lines
  --no-plt-align              Dont't align individual PLT call stubs
  --no-inline-optimize        Don't convert inline PLT to direct calls
  --sdata-got                 Force GOT location just before .sdata
  --ppc476-workaround [=pagesize]
                              Avoid a cache bug on ppc476
  --no-ppc476-workaround      Disable workaround
  --no-pic-fixup              Don't edit non-pic to pic
  --vle-reloc-fixup           Correct old object file 16A/16D relocation
elf32lppcsim: 
  -z dynamic-undefined-weak   Make undefined weak symbols dynamic
  -z nodynamic-undefined-weak Do not make undefined weak symbols dynamic
  --emit-stub-syms            Label linker stubs with a symbol
  --no-emit-stub-syms         Don't label linker stubs with a symbol
  --no-tls-optimize           Don't try to optimize TLS accesses
  --no-tls-get-addr-optimize  Don't use a special __tls_get_addr call
  --secure-plt                Use new-style PLT if possible
  --bss-plt                   Force old-style BSS PLT
  --plt-align                 Align PLT call stubs to fit cache lines
  --no-plt-align              Dont't align individual PLT call stubs
  --no-inline-optimize        Don't convert inline PLT to direct calls
  --sdata-got                 Force GOT location just before .sdata
  --ppc476-workaround [=pagesize]
                              Avoid a cache bug on ppc476
  --no-ppc476-workaround      Disable workaround
  --no-pic-fixup              Don't edit non-pic to pic
  --vle-reloc-fixup           Correct old object file 16A/16D relocation
elf32mcore: 
  --base_file <basefile>      Generate a base file for relocatable DLLs
elf32metag: 
  --stub-group-size=N         Maximum size of a group of input sections that
                                can be handled by one stub section.  A negative
                                value locates all stubs before their branches
                                (with a group size of -N), while a positive
                                value allows two groups of input sections, one
                                before, and one after each stub section.
                                Values of +/-1 indicate the linker should
                                choose suitable defaults.
elf32ppc: 
  -z dynamic-undefined-weak   Make undefined weak symbols dynamic
  -z nodynamic-undefined-weak Do not make undefined weak symbols dynamic
  --emit-stub-syms            Label linker stubs with a symbol
  --no-emit-stub-syms         Don't label linker stubs with a symbol
  --no-tls-optimize           Don't try to optimize TLS accesses
  --no-tls-get-addr-optimize  Don't use a special __tls_get_addr call
  --secure-plt                Use new-style PLT if possible
  --bss-plt                   Force old-style BSS PLT
  --plt-align                 Align PLT call stubs to fit cache lines
  --no-plt-align              Dont't align individual PLT call stubs
  --no-inline-optimize        Don't convert inline PLT to direct calls
  --sdata-got                 Force GOT location just before .sdata
  --ppc476-workaround [=pagesize]
                              Avoid a cache bug on ppc476
  --no-ppc476-workaround      Disable workaround
  --no-pic-fixup              Don't edit non-pic to pic
  --vle-reloc-fixup           Correct old object file 16A/16D relocation
elf32ppc_fbsd: 
  -z dynamic-undefined-weak   Make undefined weak symbols dynamic
  -z nodynamic-undefined-weak Do not make undefined weak symbols dynamic
  --emit-stub-syms            Label linker stubs with a symbol
  --no-emit-stub-syms         Don't label linker stubs with a symbol
  --no-tls-optimize           Don't try to optimize TLS accesses
  --no-tls-get-addr-optimize  Don't use a special __tls_get_addr call
  --secure-plt                Use new-style PLT if possible
  --bss-plt                   Force old-style BSS PLT
  --plt-align                 Align PLT call stubs to fit cache lines
  --no-plt-align              Dont't align individual PLT call stubs
  --no-inline-optimize        Don't convert inline PLT to direct calls
  --sdata-got                 Force GOT location just before .sdata
  --ppc476-workaround [=pagesize]
                              Avoid a cache bug on ppc476
  --no-ppc476-workaround      Disable workaround
  --no-pic-fixup              Don't edit non-pic to pic
  --vle-reloc-fixup           Correct old object file 16A/16D relocation
elf32ppclinux: 
  -z dynamic-undefined-weak   Make undefined weak symbols dynamic
  -z nodynamic-undefined-weak Do not make undefined weak symbols dynamic
  --emit-stub-syms            Label linker stubs with a symbol
  --no-emit-stub-syms         Don't label linker stubs with a symbol
  --no-tls-optimize           Don't try to optimize TLS accesses
  --no-tls-get-addr-optimize  Don't use a special __tls_get_addr call
  --secure-plt                Use new-style PLT if possible
  --bss-plt                   Force old-style BSS PLT
  --plt-align                 Align PLT call stubs to fit cache lines
  --no-plt-align              Dont't align individual PLT call stubs
  --no-inline-optimize        Don't convert inline PLT to direct calls
  --sdata-got                 Force GOT location just before .sdata
  --ppc476-workaround [=pagesize]
                              Avoid a cache bug on ppc476
  --no-ppc476-workaround      Disable workaround
  --no-pic-fixup              Don't edit non-pic to pic
  --vle-reloc-fixup           Correct old object file 16A/16D relocation
elf32ppcnto: 
  -z dynamic-undefined-weak   Make undefined weak symbols dynamic
  -z nodynamic-undefined-weak Do not make undefined weak symbols dynamic
  --emit-stub-syms            Label linker stubs with a symbol
  --no-emit-stub-syms         Don't label linker stubs with a symbol
  --no-tls-optimize           Don't try to optimize TLS accesses
  --no-tls-get-addr-optimize  Don't use a special __tls_get_addr call
  --secure-plt                Use new-style PLT if possible
  --bss-plt                   Force old-style BSS PLT
  --plt-align                 Align PLT call stubs to fit cache lines
  --no-plt-align              Dont't align individual PLT call stubs
  --no-inline-optimize        Don't convert inline PLT to direct calls
  --sdata-got                 Force GOT location just before .sdata
  --ppc476-workaround [=pagesize]
                              Avoid a cache bug on ppc476
  --no-ppc476-workaround      Disable workaround
  --no-pic-fixup              Don't edit non-pic to pic
  --vle-reloc-fixup           Correct old object file 16A/16D relocation
elf32ppcsim: 
  -z dynamic-undefined-weak   Make undefined weak symbols dynamic
  -z nodynamic-undefined-weak Do not make undefined weak symbols dynamic
  --emit-stub-syms            Label linker stubs with a symbol
  --no-emit-stub-syms         Don't label linker stubs with a symbol
  --no-tls-optimize           Don't try to optimize TLS accesses
  --no-tls-get-addr-optimize  Don't use a special __tls_get_addr call
  --secure-plt                Use new-style PLT if possible
  --bss-plt                   Force old-style BSS PLT
  --plt-align                 Align PLT call stubs to fit cache lines
  --no-plt-align              Dont't align individual PLT call stubs
  --no-inline-optimize        Don't convert inline PLT to direct calls
  --sdata-got                 Force GOT location just before .sdata
  --ppc476-workaround [=pagesize]
                              Avoid a cache bug on ppc476
  --no-ppc476-workaround      Disable workaround
  --no-pic-fixup              Don't edit non-pic to pic
  --vle-reloc-fixup           Correct old object file 16A/16D relocation
elf32ppcvxworks: 
  -z dynamic-undefined-weak   Make undefined weak symbols dynamic
  -z nodynamic-undefined-weak Do not make undefined weak symbols dynamic
  --emit-stub-syms            Label linker stubs with a symbol
  --no-emit-stub-syms         Don't label linker stubs with a symbol
  --no-tls-optimize           Don't try to optimize TLS accesses
  --no-tls-get-addr-optimize  Don't use a special __tls_get_addr call
  --ppc476-workaround [=pagesize]
                              Avoid a cache bug on ppc476
  --no-ppc476-workaround      Disable workaround
  --no-pic-fixup              Don't edit non-pic to pic
  --vle-reloc-fixup           Correct old object file 16A/16D relocation
  --force-dynamic             Always create dynamic sections
elf32ppcwindiss: 
  -z dynamic-undefined-weak   Make undefined weak symbols dynamic
  -z nodynamic-undefined-weak Do not make undefined weak symbols dynamic
  --emit-stub-syms            Label linker stubs with a symbol
  --no-emit-stub-syms         Don't label linker stubs with a symbol
  --no-tls-optimize           Don't try to optimize TLS accesses
  --no-tls-get-addr-optimize  Don't use a special __tls_get_addr call
  --secure-plt                Use new-style PLT if possible
  --bss-plt                   Force old-style BSS PLT
  --plt-align                 Align PLT call stubs to fit cache lines
  --no-plt-align              Dont't align individual PLT call stubs
  --no-inline-optimize        Don't convert inline PLT to direct calls
  --sdata-got                 Force GOT location just before .sdata
  --ppc476-workaround [=pagesize]
                              Avoid a cache bug on ppc476
  --no-ppc476-workaround      Disable workaround
  --no-pic-fixup              Don't edit non-pic to pic
  --vle-reloc-fixup           Correct old object file 16A/16D relocation
elf32rx: 
  --no-flag-mismatch-warnings Don't warn about objects with incompatible
                                endian or dsp settings
  --flag-mismatch-warnings    Warn about objects with incompatible
                                endian, dsp or ABI settings
  --ignore-lma                Ignore segment LMAs [default]
                                (for Renesas Tools compatibility)
  --no-ignore-lma             Don't ignore segment LMAs
elf32xtensa: 
  --size-opt                  When relaxing longcalls, prefer size
                                optimization over branch target alignment
elf_i386: 
  -z noextern-protected-data  Do not treat protected data symbol as external
  -z dynamic-undefined-weak   Make undefined weak symbols dynamic
  -z nodynamic-undefined-weak Do not make undefined weak symbols dynamic
  -z call-nop=PADDING         Use PADDING as 1-byte NOP for branch
  -z ibtplt                   Generate IBT-enabled PLT entries
  -z ibt                      Generate GNU_PROPERTY_X86_FEATURE_1_IBT
  -z shstk                    Generate GNU_PROPERTY_X86_FEATURE_1_SHSTK
  -z cet-report=[none|warning|error] (default: none)
                              Report missing IBT and SHSTK properties
elf_i386_be: 
  -z noextern-protected-data  Do not treat protected data symbol as external
  -z dynamic-undefined-weak   Make undefined weak symbols dynamic
  -z nodynamic-undefined-weak Do not make undefined weak symbols dynamic
  -z call-nop=PADDING         Use PADDING as 1-byte NOP for branch
elf_i386_fbsd: 
  -z noextern-protected-data  Do not treat protected data symbol as external
  -z dynamic-undefined-weak   Make undefined weak symbols dynamic
  -z nodynamic-undefined-weak Do not make undefined weak symbols dynamic
  -z call-nop=PADDING         Use PADDING as 1-byte NOP for branch
  -z ibtplt                   Generate IBT-enabled PLT entries
  -z ibt                      Generate GNU_PROPERTY_X86_FEATURE_1_IBT
  -z shstk                    Generate GNU_PROPERTY_X86_FEATURE_1_SHSTK
  -z cet-report=[none|warning|error] (default: none)
                              Report missing IBT and SHSTK properties
elf_i386_ldso: 
  -z noextern-protected-data  Do not treat protected data symbol as external
  -z dynamic-undefined-weak   Make undefined weak symbols dynamic
  -z nodynamic-undefined-weak Do not make undefined weak symbols dynamic
  -z call-nop=PADDING         Use PADDING as 1-byte NOP for branch
elf_i386_nacl: 
  -z noextern-protected-data  Do not treat protected data symbol as external
  -z dynamic-undefined-weak   Make undefined weak symbols dynamic
  -z nodynamic-undefined-weak Do not make undefined weak symbols dynamic
  -z call-nop=PADDING         Use PADDING as 1-byte NOP for branch
  -z ibtplt                   Generate IBT-enabled PLT entries
  -z ibt                      Generate GNU_PROPERTY_X86_FEATURE_1_IBT
  -z shstk                    Generate GNU_PROPERTY_X86_FEATURE_1_SHSTK
  -z cet-report=[none|warning|error] (default: none)
                              Report missing IBT and SHSTK properties
elf_i386_sol2: 
  -z noextern-protected-data  Do not treat protected data symbol as external
  -z dynamic-undefined-weak   Make undefined weak symbols dynamic
  -z nodynamic-undefined-weak Do not make undefined weak symbols dynamic
  -z call-nop=PADDING         Use PADDING as 1-byte NOP for branch
elf_i386_vxworks: 
  -z noextern-protected-data  Do not treat protected data symbol as external
  -z dynamic-undefined-weak   Make undefined weak symbols dynamic
  -z nodynamic-undefined-weak Do not make undefined weak symbols dynamic
  -z call-nop=PADDING         Use PADDING as 1-byte NOP for branch
  --force-dynamic             Always create dynamic sections
elf_iamcu: 
  -z noextern-protected-data  Do not treat protected data symbol as external
  -z dynamic-undefined-weak   Make undefined weak symbols dynamic
  -z nodynamic-undefined-weak Do not make undefined weak symbols dynamic
  -z call-nop=PADDING         Use PADDING as 1-byte NOP for branch
hppaelf: 
  --multi-subspace            Generate import and export stubs to support
                                multiple sub-space shared libraries
  --stub-group-size=N         Maximum size of a group of input sections that
                                can be handled by one stub section.  A negative
                                value locates all stubs before their branches
                                (with a group size of -N), while a positive
                                value allows two groups of input sections, one
                                before, and one after each stub section.
                                Values of +/-1 indicate the linker should
                                choose suitable defaults.
hppalinux: 
  --multi-subspace            Generate import and export stubs to support
                                multiple sub-space shared libraries
  --stub-group-size=N         Maximum size of a group of input sections that
                                can be handled by one stub section.  A negative
                                value locates all stubs before their branches
                                (with a group size of -N), while a positive
                                value allows two groups of input sections, one
                                before, and one after each stub section.
                                Values of +/-1 indicate the linker should
                                choose suitable defaults.
hppanbsd: 
  --multi-subspace            Generate import and export stubs to support
                                multiple sub-space shared libraries
  --stub-group-size=N         Maximum size of a group of input sections that
                                can be handled by one stub section.  A negative
                                value locates all stubs before their branches
                                (with a group size of -N), while a positive
                                value allows two groups of input sections, one
                                before, and one after each stub section.
                                Values of +/-1 indicate the linker should
                                choose suitable defaults.
hppaobsd: 
  --multi-subspace            Generate import and export stubs to support
                                multiple sub-space shared libraries
  --stub-group-size=N         Maximum size of a group of input sections that
                                can be handled by one stub section.  A negative
                                value locates all stubs before their branches
                                (with a group size of -N), while a positive
                                value allows two groups of input sections, one
                                before, and one after each stub section.
                                Values of +/-1 indicate the linker should
                                choose suitable defaults.
i386pe: 
  --base_file <basefile>             Generate a base file for relocatable DLLs
  --dll                              Set image base to the default for DLLs
  --file-alignment <size>            Set file alignment
  --heap <size>                      Set initial size of the heap
  --image-base <address>             Set start address of the executable
  --major-image-version <number>     Set version number of the executable
  --major-os-version <number>        Set minimum required OS version
  --major-subsystem-version <number> Set minimum required OS subsystem version
  --minor-image-version <number>     Set revision number of the executable
  --minor-os-version <number>        Set minimum required OS revision
  --minor-subsystem-version <number> Set minimum required OS subsystem revision
  --section-alignment <size>         Set section alignment
  --stack <size>                     Set size of the initial stack
  --subsystem <name>[:<version>]     Set required OS subsystem [& version]
  --support-old-code                 Support interworking with old code
  --[no-]leading-underscore          Set explicit symbol underscore prefix mode
  --thumb-entry=<symbol>             Set the entry point to be Thumb <symbol>
  --[no-]insert-timestamp            Use a real timestamp rather than zero (default).
                                     This makes binaries non-deterministic
  --add-stdcall-alias                Export symbols with and without @nn
  --disable-stdcall-fixup            Don't link _sym to _sym@nn
  --enable-stdcall-fixup             Link _sym to _sym@nn without warnings
  --exclude-symbols sym,sym,...      Exclude symbols from automatic export
  --exclude-all-symbols              Exclude all symbols from automatic export
  --exclude-libs lib,lib,...         Exclude libraries from automatic export
  --exclude-modules-for-implib mod,mod,...
                                     Exclude objects, archive members from auto
                                     export, place into import library instead.
  --export-all-symbols               Automatically export all globals to DLL
  --kill-at                          Remove @nn from exported symbols
  --output-def <file>                Generate a .DEF file for the built DLL
  --warn-duplicate-exports           Warn about duplicate exports
  --compat-implib                    Create backward compatible import libs;
                                       create __imp_<SYMBOL> as well.
  --enable-auto-image-base[=<address>] Automatically choose image base for DLLs
                                       (optionally starting with address) unless
                                       specifically set with --image-base
  --disable-auto-image-base          Do not auto-choose image base. (default)
  --dll-search-prefix=<string>       When linking dynamically to a dll without
                                       an importlib, use <string><basename>.dll
                                       in preference to lib<basename>.dll 
  --enable-auto-import               Do sophisticated linking of _sym to
                                       __imp_sym for DATA references
  --disable-auto-import              Do not auto-import DATA items from DLLs
  --enable-runtime-pseudo-reloc      Work around auto-import limitations by
                                       adding pseudo-relocations resolved at
                                       runtime.
  --disable-runtime-pseudo-reloc     Do not add runtime pseudo-relocations for
                                       auto-imported DATA.
  --enable-extra-pe-debug            Enable verbose debug output when building
                                       or linking to DLLs (esp. auto-import)
  --large-address-aware              Executable supports virtual addresses
                                       greater than 2 gigabytes
  --disable-large-address-aware      Executable does not support virtual
                                       addresses greater than 2 gigabytes
  --enable-long-section-names        Use long COFF section names even in
                                       executable image files
  --disable-long-section-names       Never use long COFF section names, even
                                       in object files
  --dynamicbase                      Image base address may be relocated using
                                       address space layout randomization (ASLR)
  --enable-reloc-section             Create the base relocation table
  --forceinteg               Code integrity checks are enforced
  --nxcompat                 Image is compatible with data execution prevention
  --no-isolation             Image understands isolation but do not isolate the image
  --no-seh                   Image does not use SEH. No SE handler may
                                       be called in this image
  --no-bind                  Do not bind this image
  --wdmdriver                Driver uses the WDM model
  --tsaware                  Image is Terminal Server aware
  --build-id[=STYLE]         Generate build ID
i386pe_posix: 
  --base_file <basefile>             Generate a base file for relocatable DLLs
  --dll                              Set image base to the default for DLLs
  --file-alignment <size>            Set file alignment
  --heap <size>                      Set initial size of the heap
  --image-base <address>             Set start address of the executable
  --major-image-version <number>     Set version number of the executable
  --major-os-version <number>        Set minimum required OS version
  --major-subsystem-version <number> Set minimum required OS subsystem version
  --minor-image-version <number>     Set revision number of the executable
  --minor-os-version <number>        Set minimum required OS revision
  --minor-subsystem-version <number> Set minimum required OS subsystem revision
  --section-alignment <size>         Set section alignment
  --stack <size>                     Set size of the initial stack
  --subsystem <name>[:<version>]     Set required OS subsystem [& version]
  --support-old-code                 Support interworking with old code
  --[no-]leading-underscore          Set explicit symbol underscore prefix mode
  --thumb-entry=<symbol>             Set the entry point to be Thumb <symbol>
  --[no-]insert-timestamp            Use a real timestamp rather than zero (default).
                                     This makes binaries non-deterministic
  --large-address-aware              Executable supports virtual addresses
                                       greater than 2 gigabytes
  --disable-large-address-aware      Executable does not support virtual
                                       addresses greater than 2 gigabytes
  --enable-long-section-names        Use long COFF section names even in
                                       executable image files
  --disable-long-section-names       Never use long COFF section names, even
                                       in object files
  --dynamicbase                      Image base address may be relocated using
                                       address space layout randomization (ASLR)
  --enable-reloc-section             Create the base relocation table
  --forceinteg               Code integrity checks are enforced
  --nxcompat                 Image is compatible with data execution prevention
  --no-isolation             Image understands isolation but do not isolate the image
  --no-seh                   Image does not use SEH. No SE handler may
                                       be called in this image
  --no-bind                  Do not bind this image
  --wdmdriver                Driver uses the WDM model
  --tsaware                  Image is Terminal Server aware
  --build-id[=STYLE]         Generate build ID
m68hc11elf: 
  --no-trampoline             Do not generate the far trampolines used to call
                                a far function using jsr or bsr
  --bank-window NAME          Specify the name of the memory region describing
                                the layout of the memory bank window
m68hc11elfb: 
  --no-trampoline             Do not generate the far trampolines used to call
                                a far function using jsr or bsr
  --bank-window NAME          Specify the name of the memory region describing
                                the layout of the memory bank window
m68hc12elf: 
  --no-trampoline             Do not generate the far trampolines used to call
                                a far function using jsr or bsr
  --bank-window NAME          Specify the name of the memory region describing
                                the layout of the memory bank window
m68hc12elfb: 
  --no-trampoline             Do not generate the far trampolines used to call
                                a far function using jsr or bsr
  --bank-window NAME          Specify the name of the memory region describing
                                the layout of the memory bank window
m68kelf: 
  --got=<type>                Specify GOT handling scheme
m68kelfnbsd: 
  --got=<type>                Specify GOT handling scheme
mcorepe: 
  --base_file <basefile>             Generate a base file for relocatable DLLs
  --dll                              Set image base to the default for DLLs
  --file-alignment <size>            Set file alignment
  --heap <size>                      Set initial size of the heap
  --image-base <address>             Set start address of the executable
  --major-image-version <number>     Set version number of the executable
  --major-os-version <number>        Set minimum required OS version
  --major-subsystem-version <number> Set minimum required OS subsystem version
  --minor-image-version <number>     Set revision number of the executable
  --minor-os-version <number>        Set minimum required OS revision
  --minor-subsystem-version <number> Set minimum required OS subsystem revision
  --section-alignment <size>         Set section alignment
  --stack <size>                     Set size of the initial stack
  --subsystem <name>[:<version>]     Set required OS subsystem [& version]
  --support-old-code                 Support interworking with old code
  --[no-]leading-underscore          Set explicit symbol underscore prefix mode
  --thumb-entry=<symbol>             Set the entry point to be Thumb <symbol>
  --[no-]insert-timestamp            Use a real timestamp rather than zero (default).
                                     This makes binaries non-deterministic
  --large-address-aware              Executable supports virtual addresses
                                       greater than 2 gigabytes
  --disable-large-address-aware      Executable does not support virtual
                                       addresses greater than 2 gigabytes
  --enable-long-section-names        Use long COFF section names even in
                                       executable image files
  --disable-long-section-names       Never use long COFF section names, even
                                       in object files
  --dynamicbase                      Image base address may be relocated using
                                       address space layout randomization (ASLR)
  --enable-reloc-section             Create the base relocation table
  --forceinteg               Code integrity checks are enforced
  --nxcompat                 Image is compatible with data execution prevention
  --no-isolation             Image understands isolation but do not isolate the image
  --no-seh                   Image does not use SEH. No SE handler may
                                       be called in this image
  --no-bind                  Do not bind this image
  --wdmdriver                Driver uses the WDM model
  --tsaware                  Image is Terminal Server aware
  --build-id[=STYLE]         Generate build ID
msp430elf: 
  --code-region={either,lower,upper,none}
        Transform .text* sections to {either,lower,upper,none}.text* sections
  --data-region={either,lower,upper,none}
        Transform .data*, .rodata* and .bss* sections to
        {either,lower,upper,none}.{bss,data,rodata}* sections
  --disable-sec-transformation
        Disable transformation of .{text,data,bss,rodata}* sections to
        add the {either,lower,upper,none} prefixes
msp430X: 
  --code-region={either,lower,upper,none}
        Transform .text* sections to {either,lower,upper,none}.text* sections
  --data-region={either,lower,upper,none}
        Transform .data*, .rodata* and .bss* sections to
        {either,lower,upper,none}.{bss,data,rodata}* sections
  --disable-sec-transformation
        Disable transformation of .{text,data,bss,rodata}* sections to
        add the {either,lower,upper,none} prefixes
nds32elf: 
  --m[no-]fp-as-gp            Disable/enable fp-as-gp relaxation
  --mexport-symbols=FILE      Exporting symbols in linker script
  --mhyper-relax=level        Adjust relax level (low|medium|high). default: medium
  --m[no-]tlsdesc-trampoline  Disable/enable TLS DESC trampoline
nds32elf16m: 
  --m[no-]fp-as-gp            Disable/enable fp-as-gp relaxation
  --mexport-symbols=FILE      Exporting symbols in linker script
  --mhyper-relax=level        Adjust relax level (low|medium|high). default: medium
  --m[no-]tlsdesc-trampoline  Disable/enable TLS DESC trampoline
nds32elf_linux: 
  --m[no-]fp-as-gp            Disable/enable fp-as-gp relaxation
  --mexport-symbols=FILE      Exporting symbols in linker script
  --mhyper-relax=level        Adjust relax level (low|medium|high). default: medium
  --m[no-]tlsdesc-trampoline  Disable/enable TLS DESC trampoline
nds32belf: 
  --m[no-]fp-as-gp            Disable/enable fp-as-gp relaxation
  --mexport-symbols=FILE      Exporting symbols in linker script
  --mhyper-relax=level        Adjust relax level (low|medium|high). default: medium
  --m[no-]tlsdesc-trampoline  Disable/enable TLS DESC trampoline
nds32belf16m: 
  --m[no-]fp-as-gp            Disable/enable fp-as-gp relaxation
  --mexport-symbols=FILE      Exporting symbols in linker script
  --mhyper-relax=level        Adjust relax level (low|medium|high). default: medium
  --m[no-]tlsdesc-trampoline  Disable/enable TLS DESC trampoline
nds32belf_linux: 
  --m[no-]fp-as-gp            Disable/enable fp-as-gp relaxation
  --mexport-symbols=FILE      Exporting symbols in linker script
  --mhyper-relax=level        Adjust relax level (low|medium|high). default: medium
  --m[no-]tlsdesc-trampoline  Disable/enable TLS DESC trampoline
ppclynx: 
  -z dynamic-undefined-weak   Make undefined weak symbols dynamic
  -z nodynamic-undefined-weak Do not make undefined weak symbols dynamic
  --emit-stub-syms            Label linker stubs with a symbol
  --no-emit-stub-syms         Don't label linker stubs with a symbol
  --no-tls-optimize           Don't try to optimize TLS accesses
  --no-tls-get-addr-optimize  Don't use a special __tls_get_addr call
  --secure-plt                Use new-style PLT if possible
  --bss-plt                   Force old-style BSS PLT
  --plt-align                 Align PLT call stubs to fit cache lines
  --no-plt-align              Dont't align individual PLT call stubs
  --no-inline-optimize        Don't convert inline PLT to direct calls
  --sdata-got                 Force GOT location just before .sdata
  --ppc476-workaround [=pagesize]
                              Avoid a cache bug on ppc476
  --no-ppc476-workaround      Disable workaround
  --no-pic-fixup              Don't edit non-pic to pic
  --vle-reloc-fixup           Correct old object file 16A/16D relocation
ppcpe: 
  --base_file <basefile>             Generate a base file for relocatable DLLs
  --dll                              Set image base to the default for DLLs
  --file-alignment <size>            Set file alignment
  --heap <size>                      Set initial size of the heap
  --image-base <address>             Set start address of the executable
  --major-image-version <number>     Set version number of the executable
  --major-os-version <number>        Set minimum required OS version
  --major-subsystem-version <number> Set minimum required OS subsystem version
  --minor-image-version <number>     Set revision number of the executable
  --minor-os-version <number>        Set minimum required OS revision
  --minor-subsystem-version <number> Set minimum required OS subsystem revision
  --section-alignment <size>         Set section alignment
  --stack <size>                     Set size of the initial stack
  --subsystem <name>[:<version>]     Set required OS subsystem [& version]
  --support-old-code                 Support interworking with old code
  --[no-]leading-underscore          Set explicit symbol underscore prefix mode
  --thumb-entry=<symbol>             Set the entry point to be Thumb <symbol>
  --[no-]insert-timestamp            Use a real timestamp rather than zero (default).
                                     This makes binaries non-deterministic
  --large-address-aware              Executable supports virtual addresses
                                       greater than 2 gigabytes
  --disable-large-address-aware      Executable does not support virtual
                                       addresses greater than 2 gigabytes
  --enable-long-section-names        Use long COFF section names even in
                                       executable image files
  --disable-long-section-names       Never use long COFF section names, even
                                       in object files
  --dynamicbase                      Image base address may be relocated using
                                       address space layout randomization (ASLR)
  --enable-reloc-section             Create the base relocation table
  --forceinteg               Code integrity checks are enforced
  --nxcompat                 Image is compatible with data execution prevention
  --no-isolation             Image understands isolation but do not isolate the image
  --no-seh                   Image does not use SEH. No SE handler may
                                       be called in this image
  --no-bind                  Do not bind this image
  --wdmdriver                Driver uses the WDM model
  --tsaware                  Image is Terminal Server aware
  --build-id[=STYLE]         Generate build ID
shelf_vxworks: 
  --force-dynamic             Always create dynamic sections
shlelf_vxworks: 
  --force-dynamic             Always create dynamic sections
shpe: 
  --base_file <basefile>             Generate a base file for relocatable DLLs
  --dll                              Set image base to the default for DLLs
  --file-alignment <size>            Set file alignment
  --heap <size>                      Set initial size of the heap
  --image-base <address>             Set start address of the executable
  --major-image-version <number>     Set version number of the executable
  --major-os-version <number>        Set minimum required OS version
  --major-subsystem-version <number> Set minimum required OS subsystem version
  --minor-image-version <number>     Set revision number of the executable
  --minor-os-version <number>        Set minimum required OS revision
  --minor-subsystem-version <number> Set minimum required OS subsystem revision
  --section-alignment <size>         Set section alignment
  --stack <size>                     Set size of the initial stack
  --subsystem <name>[:<version>]     Set required OS subsystem [& version]
  --support-old-code                 Support interworking with old code
  --[no-]leading-underscore          Set explicit symbol underscore prefix mode
  --thumb-entry=<symbol>             Set the entry point to be Thumb <symbol>
  --[no-]insert-timestamp            Use a real timestamp rather than zero (default).
                                     This makes binaries non-deterministic
  --add-stdcall-alias                Export symbols with and without @nn
  --disable-stdcall-fixup            Don't link _sym to _sym@nn
  --enable-stdcall-fixup             Link _sym to _sym@nn without warnings
  --exclude-symbols sym,sym,...      Exclude symbols from automatic export
  --exclude-all-symbols              Exclude all symbols from automatic export
  --exclude-libs lib,lib,...         Exclude libraries from automatic export
  --exclude-modules-for-implib mod,mod,...
                                     Exclude objects, archive members from auto
                                     export, place into import library instead.
  --export-all-symbols               Automatically export all globals to DLL
  --kill-at                          Remove @nn from exported symbols
  --output-def <file>                Generate a .DEF file for the built DLL
  --warn-duplicate-exports           Warn about duplicate exports
  --compat-implib                    Create backward compatible import libs;
                                       create __imp_<SYMBOL> as well.
  --enable-auto-image-base[=<address>] Automatically choose image base for DLLs
                                       (optionally starting with address) unless
                                       specifically set with --image-base
  --disable-auto-image-base          Do not auto-choose image base. (default)
  --dll-search-prefix=<string>       When linking dynamically to a dll without
                                       an importlib, use <string><basename>.dll
                                       in preference to lib<basename>.dll 
  --enable-auto-import               Do sophisticated linking of _sym to
                                       __imp_sym for DATA references
  --disable-auto-import              Do not auto-import DATA items from DLLs
  --enable-runtime-pseudo-reloc      Work around auto-import limitations by
                                       adding pseudo-relocations resolved at
                                       runtime.
  --disable-runtime-pseudo-reloc     Do not add runtime pseudo-relocations for
                                       auto-imported DATA.
  --enable-extra-pe-debug            Enable verbose debug output when building
                                       or linking to DLLs (esp. auto-import)
  --large-address-aware              Executable supports virtual addresses
                                       greater than 2 gigabytes
  --disable-large-address-aware      Executable does not support virtual
                                       addresses greater than 2 gigabytes
  --enable-long-section-names        Use long COFF section names even in
                                       executable image files
  --disable-long-section-names       Never use long COFF section names, even
                                       in object files
  --dynamicbase                      Image base address may be relocated using
                                       address space layout randomization (ASLR)
  --enable-reloc-section             Create the base relocation table
  --forceinteg               Code integrity checks are enforced
  --nxcompat                 Image is compatible with data execution prevention
  --no-isolation             Image understands isolation but do not isolate the image
  --no-seh                   Image does not use SEH. No SE handler may
                                       be called in this image
  --no-bind                  Do not bind this image
  --wdmdriver                Driver uses the WDM model
  --tsaware                  Image is Terminal Server aware
  --build-id[=STYLE]         Generate build ID
tic3xcoff: 
  --format 0|1|2              Specify which COFF version to use
tic3xcoff_onchip: 
  --format 0|1|2              Specify which COFF version to use
tic4xcoff: 
  --format 0|1|2              Specify which COFF version to use
tic54xcoff: 
  --format 0|1|2              Specify which COFF version to use
aarch64elf: 
  --no-enum-size-warning      Don't warn about objects with incompatible
                                enum sizes
  --no-wchar-size-warning     Don't warn about objects with incompatible
                                wchar_t sizes
  --pic-veneer                Always generate PIC interworking veneers
  --stub-group-size=N         Maximum size of a group of input sections that
                                can be handled by one stub section.  A negative
                                value locates all stubs after their branches
                                (with a group size of -N), while a positive
                                value allows two groups of input sections, one
                                before, and one after each stub section.
                                Values of +/-1 indicate the linker should
                                choose suitable defaults.
  --fix-cortex-a53-835769      Fix erratum 835769
  --fix-cortex-a53-843419[=full|adr|adrp]      Fix erratum 843419 and optionally specify which workaround to use.
                                               full (default): Use both ADRP and ADR workaround, this will 
                                                 increase the size of your binaries.
                                               adr: Only use the ADR workaround, this will not cause any increase
                                                 in binary size but linking will fail if the referenced address is
                                                 out of range of an ADR instruction.  This will remove the need of using
                                                 a veneer and results in both performance and size benefits.
                                               adrp: Use only the ADRP workaround, this will never rewrite your ADRP
                                                 instruction into an ADR.  As such the workaround will always use a
                                                 veneer and this will give you both a performance and size overhead.
  --no-apply-dynamic-relocs    Do not apply link-time values for dynamic relocations
  -z force-bti                  Turn on Branch Target Identification mechanism and generate PLTs with BTI. Generate warnings for missing BTI on inputs
  -z pac-plt                    Protect PLTs with Pointer Authentication.
aarch64elf32: 
  --no-enum-size-warning      Don't warn about objects with incompatible
                                enum sizes
  --no-wchar-size-warning     Don't warn about objects with incompatible
                                wchar_t sizes
  --pic-veneer                Always generate PIC interworking veneers
  --stub-group-size=N         Maximum size of a group of input sections that
                                can be handled by one stub section.  A negative
                                value locates all stubs after their branches
                                (with a group size of -N), while a positive
                                value allows two groups of input sections, one
                                before, and one after each stub section.
                                Values of +/-1 indicate the linker should
                                choose suitable defaults.
  --fix-cortex-a53-835769      Fix erratum 835769
  --fix-cortex-a53-843419[=full|adr|adrp]      Fix erratum 843419 and optionally specify which workaround to use.
                                               full (default): Use both ADRP and ADR workaround, this will 
                                                 increase the size of your binaries.
                                               adr: Only use the ADR workaround, this will not cause any increase
                                                 in binary size but linking will fail if the referenced address is
                                                 out of range of an ADR instruction.  This will remove the need of using
                                                 a veneer and results in both performance and size benefits.
                                               adrp: Use only the ADRP workaround, this will never rewrite your ADRP
                                                 instruction into an ADR.  As such the workaround will always use a
                                                 veneer and this will give you both a performance and size overhead.
  --no-apply-dynamic-relocs    Do not apply link-time values for dynamic relocations
  -z force-bti                  Turn on Branch Target Identification mechanism and generate PLTs with BTI. Generate warnings for missing BTI on inputs
  -z pac-plt                    Protect PLTs with Pointer Authentication.
aarch64elfb: 
  --no-enum-size-warning      Don't warn about objects with incompatible
                                enum sizes
  --no-wchar-size-warning     Don't warn about objects with incompatible
                                wchar_t sizes
  --pic-veneer                Always generate PIC interworking veneers
  --stub-group-size=N         Maximum size of a group of input sections that
                                can be handled by one stub section.  A negative
                                value locates all stubs after their branches
                                (with a group size of -N), while a positive
                                value allows two groups of input sections, one
                                before, and one after each stub section.
                                Values of +/-1 indicate the linker should
                                choose suitable defaults.
  --fix-cortex-a53-835769      Fix erratum 835769
  --fix-cortex-a53-843419[=full|adr|adrp]      Fix erratum 843419 and optionally specify which workaround to use.
                                               full (default): Use both ADRP and ADR workaround, this will 
                                                 increase the size of your binaries.
                                               adr: Only use the ADR workaround, this will not cause any increase
                                                 in binary size but linking will fail if the referenced address is
                                                 out of range of an ADR instruction.  This will remove the need of using
                                                 a veneer and results in both performance and size benefits.
                                               adrp: Use only the ADRP workaround, this will never rewrite your ADRP
                                                 instruction into an ADR.  As such the workaround will always use a
                                                 veneer and this will give you both a performance and size overhead.
  --no-apply-dynamic-relocs    Do not apply link-time values for dynamic relocations
  -z force-bti                  Turn on Branch Target Identification mechanism and generate PLTs with BTI. Generate warnings for missing BTI on inputs
  -z pac-plt                    Protect PLTs with Pointer Authentication.
aarch64elf32b: 
  --no-enum-size-warning      Don't warn about objects with incompatible
                                enum sizes
  --no-wchar-size-warning     Don't warn about objects with incompatible
                                wchar_t sizes
  --pic-veneer                Always generate PIC interworking veneers
  --stub-group-size=N         Maximum size of a group of input sections that
                                can be handled by one stub section.  A negative
                                value locates all stubs after their branches
                                (with a group size of -N), while a positive
                                value allows two groups of input sections, one
                                before, and one after each stub section.
                                Values of +/-1 indicate the linker should
                                choose suitable defaults.
  --fix-cortex-a53-835769      Fix erratum 835769
  --fix-cortex-a53-843419[=full|adr|adrp]      Fix erratum 843419 and optionally specify which workaround to use.
                                               full (default): Use both ADRP and ADR workaround, this will 
                                                 increase the size of your binaries.
                                               adr: Only use the ADR workaround, this will not cause any increase
                                                 in binary size but linking will fail if the referenced address is
                                                 out of range of an ADR instruction.  This will remove the need of using
                                                 a veneer and results in both performance and size benefits.
                                               adrp: Use only the ADRP workaround, this will never rewrite your ADRP
                                                 instruction into an ADR.  As such the workaround will always use a
                                                 veneer and this will give you both a performance and size overhead.
  --no-apply-dynamic-relocs    Do not apply link-time values for dynamic relocations
  -z force-bti                  Turn on Branch Target Identification mechanism and generate PLTs with BTI. Generate warnings for missing BTI on inputs
  -z pac-plt                    Protect PLTs with Pointer Authentication.
aarch64cloudabi: 
  --no-enum-size-warning      Don't warn about objects with incompatible
                                enum sizes
  --no-wchar-size-warning     Don't warn about objects with incompatible
                                wchar_t sizes
  --pic-veneer                Always generate PIC interworking veneers
  --stub-group-size=N         Maximum size of a group of input sections that
                                can be handled by one stub section.  A negative
                                value locates all stubs after their branches
                                (with a group size of -N), while a positive
                                value allows two groups of input sections, one
                                before, and one after each stub section.
                                Values of +/-1 indicate the linker should
                                choose suitable defaults.
  --fix-cortex-a53-835769      Fix erratum 835769
  --fix-cortex-a53-843419[=full|adr|adrp]      Fix erratum 843419 and optionally specify which workaround to use.
                                               full (default): Use both ADRP and ADR workaround, this will 
                                                 increase the size of your binaries.
                                               adr: Only use the ADR workaround, this will not cause any increase
                                                 in binary size but linking will fail if the referenced address is
                                                 out of range of an ADR instruction.  This will remove the need of using
                                                 a veneer and results in both performance and size benefits.
                                               adrp: Use only the ADRP workaround, this will never rewrite your ADRP
                                                 instruction into an ADR.  As such the workaround will always use a
                                                 veneer and this will give you both a performance and size overhead.
  --no-apply-dynamic-relocs    Do not apply link-time values for dynamic relocations
  -z force-bti                  Turn on Branch Target Identification mechanism and generate PLTs with BTI. Generate warnings for missing BTI on inputs
  -z pac-plt                    Protect PLTs with Pointer Authentication.
aarch64cloudabib: 
  --no-enum-size-warning      Don't warn about objects with incompatible
                                enum sizes
  --no-wchar-size-warning     Don't warn about objects with incompatible
                                wchar_t sizes
  --pic-veneer                Always generate PIC interworking veneers
  --stub-group-size=N         Maximum size of a group of input sections that
                                can be handled by one stub section.  A negative
                                value locates all stubs after their branches
                                (with a group size of -N), while a positive
                                value allows two groups of input sections, one
                                before, and one after each stub section.
                                Values of +/-1 indicate the linker should
                                choose suitable defaults.
  --fix-cortex-a53-835769      Fix erratum 835769
  --fix-cortex-a53-843419[=full|adr|adrp]      Fix erratum 843419 and optionally specify which workaround to use.
                                               full (default): Use both ADRP and ADR workaround, this will 
                                                 increase the size of your binaries.
                                               adr: Only use the ADR workaround, this will not cause any increase
                                                 in binary size but linking will fail if the referenced address is
                                                 out of range of an ADR instruction.  This will remove the need of using
                                                 a veneer and results in both performance and size benefits.
                                               adrp: Use only the ADRP workaround, this will never rewrite your ADRP
                                                 instruction into an ADR.  As such the workaround will always use a
                                                 veneer and this will give you both a performance and size overhead.
  --no-apply-dynamic-relocs    Do not apply link-time values for dynamic relocations
  -z force-bti                  Turn on Branch Target Identification mechanism and generate PLTs with BTI. Generate warnings for missing BTI on inputs
  -z pac-plt                    Protect PLTs with Pointer Authentication.
aarch64fbsd: 
  --no-enum-size-warning      Don't warn about objects with incompatible
                                enum sizes
  --no-wchar-size-warning     Don't warn about objects with incompatible
                                wchar_t sizes
  --pic-veneer                Always generate PIC interworking veneers
  --stub-group-size=N         Maximum size of a group of input sections that
                                can be handled by one stub section.  A negative
                                value locates all stubs after their branches
                                (with a group size of -N), while a positive
                                value allows two groups of input sections, one
                                before, and one after each stub section.
                                Values of +/-1 indicate the linker should
                                choose suitable defaults.
  --fix-cortex-a53-835769      Fix erratum 835769
  --fix-cortex-a53-843419[=full|adr|adrp]      Fix erratum 843419 and optionally specify which workaround to use.
                                               full (default): Use both ADRP and ADR workaround, this will 
                                                 increase the size of your binaries.
                                               adr: Only use the ADR workaround, this will not cause any increase
                                                 in binary size but linking will fail if the referenced address is
                                                 out of range of an ADR instruction.  This will remove the need of using
                                                 a veneer and results in both performance and size benefits.
                                               adrp: Use only the ADRP workaround, this will never rewrite your ADRP
                                                 instruction into an ADR.  As such the workaround will always use a
                                                 veneer and this will give you both a performance and size overhead.
  --no-apply-dynamic-relocs    Do not apply link-time values for dynamic relocations
  -z force-bti                  Turn on Branch Target Identification mechanism and generate PLTs with BTI. Generate warnings for missing BTI on inputs
  -z pac-plt                    Protect PLTs with Pointer Authentication.
aarch64fbsdb: 
  --no-enum-size-warning      Don't warn about objects with incompatible
                                enum sizes
  --no-wchar-size-warning     Don't warn about objects with incompatible
                                wchar_t sizes
  --pic-veneer                Always generate PIC interworking veneers
  --stub-group-size=N         Maximum size of a group of input sections that
                                can be handled by one stub section.  A negative
                                value locates all stubs after their branches
                                (with a group size of -N), while a positive
                                value allows two groups of input sections, one
                                before, and one after each stub section.
                                Values of +/-1 indicate the linker should
                                choose suitable defaults.
  --fix-cortex-a53-835769      Fix erratum 835769
  --fix-cortex-a53-843419[=full|adr|adrp]      Fix erratum 843419 and optionally specify which workaround to use.
                                               full (default): Use both ADRP and ADR workaround, this will 
                                                 increase the size of your binaries.
                                               adr: Only use the ADR workaround, this will not cause any increase
                                                 in binary size but linking will fail if the referenced address is
                                                 out of range of an ADR instruction.  This will remove the need of using
                                                 a veneer and results in both performance and size benefits.
                                               adrp: Use only the ADRP workaround, this will never rewrite your ADRP
                                                 instruction into an ADR.  As such the workaround will always use a
                                                 veneer and this will give you both a performance and size overhead.
  --no-apply-dynamic-relocs    Do not apply link-time values for dynamic relocations
  -z force-bti                  Turn on Branch Target Identification mechanism and generate PLTs with BTI. Generate warnings for missing BTI on inputs
  -z pac-plt                    Protect PLTs with Pointer Authentication.
aarch64linux: 
  --no-enum-size-warning      Don't warn about objects with incompatible
                                enum sizes
  --no-wchar-size-warning     Don't warn about objects with incompatible
                                wchar_t sizes
  --pic-veneer                Always generate PIC interworking veneers
  --stub-group-size=N         Maximum size of a group of input sections that
                                can be handled by one stub section.  A negative
                                value locates all stubs after their branches
                                (with a group size of -N), while a positive
                                value allows two groups of input sections, one
                                before, and one after each stub section.
                                Values of +/-1 indicate the linker should
                                choose suitable defaults.
  --fix-cortex-a53-835769      Fix erratum 835769
  --fix-cortex-a53-843419[=full|adr|adrp]      Fix erratum 843419 and optionally specify which workaround to use.
                                               full (default): Use both ADRP and ADR workaround, this will 
                                                 increase the size of your binaries.
                                               adr: Only use the ADR workaround, this will not cause any increase
                                                 in binary size but linking will fail if the referenced address is
                                                 out of range of an ADR instruction.  This will remove the need of using
                                                 a veneer and results in both performance and size benefits.
                                               adrp: Use only the ADRP workaround, this will never rewrite your ADRP
                                                 instruction into an ADR.  As such the workaround will always use a
                                                 veneer and this will give you both a performance and size overhead.
  --no-apply-dynamic-relocs    Do not apply link-time values for dynamic relocations
  -z force-bti                  Turn on Branch Target Identification mechanism and generate PLTs with BTI. Generate warnings for missing BTI on inputs
  -z pac-plt                    Protect PLTs with Pointer Authentication.
aarch64linuxb: 
  --no-enum-size-warning      Don't warn about objects with incompatible
                                enum sizes
  --no-wchar-size-warning     Don't warn about objects with incompatible
                                wchar_t sizes
  --pic-veneer                Always generate PIC interworking veneers
  --stub-group-size=N         Maximum size of a group of input sections that
                                can be handled by one stub section.  A negative
                                value locates all stubs after their branches
                                (with a group size of -N), while a positive
                                value allows two groups of input sections, one
                                before, and one after each stub section.
                                Values of +/-1 indicate the linker should
                                choose suitable defaults.
  --fix-cortex-a53-835769      Fix erratum 835769
  --fix-cortex-a53-843419[=full|adr|adrp]      Fix erratum 843419 and optionally specify which workaround to use.
                                               full (default): Use both ADRP and ADR workaround, this will 
                                                 increase the size of your binaries.
                                               adr: Only use the ADR workaround, this will not cause any increase
                                                 in binary size but linking will fail if the referenced address is
                                                 out of range of an ADR instruction.  This will remove the need of using
                                                 a veneer and results in both performance and size benefits.
                                               adrp: Use only the ADRP workaround, this will never rewrite your ADRP
                                                 instruction into an ADR.  As such the workaround will always use a
                                                 veneer and this will give you both a performance and size overhead.
  --no-apply-dynamic-relocs    Do not apply link-time values for dynamic relocations
  -z force-bti                  Turn on Branch Target Identification mechanism and generate PLTs with BTI. Generate warnings for missing BTI on inputs
  -z pac-plt                    Protect PLTs with Pointer Authentication.
aarch64linux32: 
  --no-enum-size-warning      Don't warn about objects with incompatible
                                enum sizes
  --no-wchar-size-warning     Don't warn about objects with incompatible
                                wchar_t sizes
  --pic-veneer                Always generate PIC interworking veneers
  --stub-group-size=N         Maximum size of a group of input sections that
                                can be handled by one stub section.  A negative
                                value locates all stubs after their branches
                                (with a group size of -N), while a positive
                                value allows two groups of input sections, one
                                before, and one after each stub section.
                                Values of +/-1 indicate the linker should
                                choose suitable defaults.
  --fix-cortex-a53-835769      Fix erratum 835769
  --fix-cortex-a53-843419[=full|adr|adrp]      Fix erratum 843419 and optionally specify which workaround to use.
                                               full (default): Use both ADRP and ADR workaround, this will 
                                                 increase the size of your binaries.
                                               adr: Only use the ADR workaround, this will not cause any increase
                                                 in binary size but linking will fail if the referenced address is
                                                 out of range of an ADR instruction.  This will remove the need of using
                                                 a veneer and results in both performance and size benefits.
                                               adrp: Use only the ADRP workaround, this will never rewrite your ADRP
                                                 instruction into an ADR.  As such the workaround will always use a
                                                 veneer and this will give you both a performance and size overhead.
  --no-apply-dynamic-relocs    Do not apply link-time values for dynamic relocations
  -z force-bti                  Turn on Branch Target Identification mechanism and generate PLTs with BTI. Generate warnings for missing BTI on inputs
  -z pac-plt                    Protect PLTs with Pointer Authentication.
aarch64linux32b: 
  --no-enum-size-warning      Don't warn about objects with incompatible
                                enum sizes
  --no-wchar-size-warning     Don't warn about objects with incompatible
                                wchar_t sizes
  --pic-veneer                Always generate PIC interworking veneers
  --stub-group-size=N         Maximum size of a group of input sections that
                                can be handled by one stub section.  A negative
                                value locates all stubs after their branches
                                (with a group size of -N), while a positive
                                value allows two groups of input sections, one
                                before, and one after each stub section.
                                Values of +/-1 indicate the linker should
                                choose suitable defaults.
  --fix-cortex-a53-835769      Fix erratum 835769
  --fix-cortex-a53-843419[=full|adr|adrp]      Fix erratum 843419 and optionally specify which workaround to use.
                                               full (default): Use both ADRP and ADR workaround, this will 
                                                 increase the size of your binaries.
                                               adr: Only use the ADR workaround, this will not cause any increase
                                                 in binary size but linking will fail if the referenced address is
                                                 out of range of an ADR instruction.  This will remove the need of using
                                                 a veneer and results in both performance and size benefits.
                                               adrp: Use only the ADRP workaround, this will never rewrite your ADRP
                                                 instruction into an ADR.  As such the workaround will always use a
                                                 veneer and this will give you both a performance and size overhead.
  --no-apply-dynamic-relocs    Do not apply link-time values for dynamic relocations
  -z force-bti                  Turn on Branch Target Identification mechanism and generate PLTs with BTI. Generate warnings for missing BTI on inputs
  -z pac-plt                    Protect PLTs with Pointer Authentication.
elf32_x86_64: 
  -z noextern-protected-data  Do not treat protected data symbol as external
  -z dynamic-undefined-weak   Make undefined weak symbols dynamic
  -z nodynamic-undefined-weak Do not make undefined weak symbols dynamic
  -z noreloc-overflow         Disable relocation overflow check
  -z call-nop=PADDING         Use PADDING as 1-byte NOP for branch
  -z ibtplt                   Generate IBT-enabled PLT entries
  -z ibt                      Generate GNU_PROPERTY_X86_FEATURE_1_IBT
  -z shstk                    Generate GNU_PROPERTY_X86_FEATURE_1_SHSTK
  -z cet-report=[none|warning|error] (default: none)
                              Report missing IBT and SHSTK properties
elf32_x86_64_nacl: 
  -z noextern-protected-data  Do not treat protected data symbol as external
  -z dynamic-undefined-weak   Make undefined weak symbols dynamic
  -z nodynamic-undefined-weak Do not make undefined weak symbols dynamic
  -z noreloc-overflow         Disable relocation overflow check
  -z call-nop=PADDING         Use PADDING as 1-byte NOP for branch
  -z ibtplt                   Generate IBT-enabled PLT entries
  -z ibt                      Generate GNU_PROPERTY_X86_FEATURE_1_IBT
  -z shstk                    Generate GNU_PROPERTY_X86_FEATURE_1_SHSTK
  -z cet-report=[none|warning|error] (default: none)
                              Report missing IBT and SHSTK properties
elf32b4300: 
  --insn32                    Only generate 32-bit microMIPS instructions
  --no-insn32                 Generate all microMIPS instructions
  --ignore-branch-isa         Accept invalid branch relocations requiring
                              an ISA mode switch
  --no-ignore-branch-isa      Reject invalid branch relocations requiring
                              an ISA mode switch
  --compact-branches          Generate compact branches/jumps for MIPS R6
  --no-compact-branches       Generate delay slot branches/jumps for MIPS R6
elf32bmip: 
  --insn32                    Only generate 32-bit microMIPS instructions
  --no-insn32                 Generate all microMIPS instructions
  --ignore-branch-isa         Accept invalid branch relocations requiring
                              an ISA mode switch
  --no-ignore-branch-isa      Reject invalid branch relocations requiring
                              an ISA mode switch
  --compact-branches          Generate compact branches/jumps for MIPS R6
  --no-compact-branches       Generate delay slot branches/jumps for MIPS R6
elf32bmipn32: 
  --insn32                    Only generate 32-bit microMIPS instructions
  --no-insn32                 Generate all microMIPS instructions
  --ignore-branch-isa         Accept invalid branch relocations requiring
                              an ISA mode switch
  --no-ignore-branch-isa      Reject invalid branch relocations requiring
                              an ISA mode switch
  --compact-branches          Generate compact branches/jumps for MIPS R6
  --no-compact-branches       Generate delay slot branches/jumps for MIPS R6
elf32bsmip: 
  --insn32                    Only generate 32-bit microMIPS instructions
  --no-insn32                 Generate all microMIPS instructions
  --ignore-branch-isa         Accept invalid branch relocations requiring
                              an ISA mode switch
  --no-ignore-branch-isa      Reject invalid branch relocations requiring
                              an ISA mode switch
  --compact-branches          Generate compact branches/jumps for MIPS R6
  --no-compact-branches       Generate delay slot branches/jumps for MIPS R6
elf32btsmip: 
  --insn32                    Only generate 32-bit microMIPS instructions
  --no-insn32                 Generate all microMIPS instructions
  --ignore-branch-isa         Accept invalid branch relocations requiring
                              an ISA mode switch
  --no-ignore-branch-isa      Reject invalid branch relocations requiring
                              an ISA mode switch
  --compact-branches          Generate compact branches/jumps for MIPS R6
  --no-compact-branches       Generate delay slot branches/jumps for MIPS R6
elf32btsmip_fbsd: 
  --insn32                    Only generate 32-bit microMIPS instructions
  --no-insn32                 Generate all microMIPS instructions
  --ignore-branch-isa         Accept invalid branch relocations requiring
                              an ISA mode switch
  --no-ignore-branch-isa      Reject invalid branch relocations requiring
                              an ISA mode switch
  --compact-branches          Generate compact branches/jumps for MIPS R6
  --no-compact-branches       Generate delay slot branches/jumps for MIPS R6
elf32btsmipn32: 
  --insn32                    Only generate 32-bit microMIPS instructions
  --no-insn32                 Generate all microMIPS instructions
  --ignore-branch-isa         Accept invalid branch relocations requiring
                              an ISA mode switch
  --no-ignore-branch-isa      Reject invalid branch relocations requiring
                              an ISA mode switch
  --compact-branches          Generate compact branches/jumps for MIPS R6
  --no-compact-branches       Generate delay slot branches/jumps for MIPS R6
elf32btsmipn32_fbsd: 
  --insn32                    Only generate 32-bit microMIPS instructions
  --no-insn32                 Generate all microMIPS instructions
  --ignore-branch-isa         Accept invalid branch relocations requiring
                              an ISA mode switch
  --no-ignore-branch-isa      Reject invalid branch relocations requiring
                              an ISA mode switch
  --compact-branches          Generate compact branches/jumps for MIPS R6
  --no-compact-branches       Generate delay slot branches/jumps for MIPS R6
elf32ebmip: 
  --insn32                    Only generate 32-bit microMIPS instructions
  --no-insn32                 Generate all microMIPS instructions
  --ignore-branch-isa         Accept invalid branch relocations requiring
                              an ISA mode switch
  --no-ignore-branch-isa      Reject invalid branch relocations requiring
                              an ISA mode switch
  --compact-branches          Generate compact branches/jumps for MIPS R6
  --no-compact-branches       Generate delay slot branches/jumps for MIPS R6
elf32ebmipvxworks: 
  --insn32                    Only generate 32-bit microMIPS instructions
  --no-insn32                 Generate all microMIPS instructions
  --ignore-branch-isa         Accept invalid branch relocations requiring
                              an ISA mode switch
  --no-ignore-branch-isa      Reject invalid branch relocations requiring
                              an ISA mode switch
  --compact-branches          Generate compact branches/jumps for MIPS R6
  --no-compact-branches       Generate delay slot branches/jumps for MIPS R6
  --force-dynamic             Always create dynamic sections
elf32elmip: 
  --insn32                    Only generate 32-bit microMIPS instructions
  --no-insn32                 Generate all microMIPS instructions
  --ignore-branch-isa         Accept invalid branch relocations requiring
                              an ISA mode switch
  --no-ignore-branch-isa      Reject invalid branch relocations requiring
                              an ISA mode switch
  --compact-branches          Generate compact branches/jumps for MIPS R6
  --no-compact-branches       Generate delay slot branches/jumps for MIPS R6
elf32elmipvxworks: 
  --insn32                    Only generate 32-bit microMIPS instructions
  --no-insn32                 Generate all microMIPS instructions
  --ignore-branch-isa         Accept invalid branch relocations requiring
                              an ISA mode switch
  --no-ignore-branch-isa      Reject invalid branch relocations requiring
                              an ISA mode switch
  --compact-branches          Generate compact branches/jumps for MIPS R6
  --no-compact-branches       Generate delay slot branches/jumps for MIPS R6
  --force-dynamic             Always create dynamic sections
elf32l4300: 
  --insn32                    Only generate 32-bit microMIPS instructions
  --no-insn32                 Generate all microMIPS instructions
  --ignore-branch-isa         Accept invalid branch relocations requiring
                              an ISA mode switch
  --no-ignore-branch-isa      Reject invalid branch relocations requiring
                              an ISA mode switch
  --compact-branches          Generate compact branches/jumps for MIPS R6
  --no-compact-branches       Generate delay slot branches/jumps for MIPS R6
elf32lmip: 
  --insn32                    Only generate 32-bit microMIPS instructions
  --no-insn32                 Generate all microMIPS instructions
  --ignore-branch-isa         Accept invalid branch relocations requiring
                              an ISA mode switch
  --no-ignore-branch-isa      Reject invalid branch relocations requiring
                              an ISA mode switch
  --compact-branches          Generate compact branches/jumps for MIPS R6
  --no-compact-branches       Generate delay slot branches/jumps for MIPS R6
elf32lr5900: 
  --insn32                    Only generate 32-bit microMIPS instructions
  --no-insn32                 Generate all microMIPS instructions
  --ignore-branch-isa         Accept invalid branch relocations requiring
                              an ISA mode switch
  --no-ignore-branch-isa      Reject invalid branch relocations requiring
                              an ISA mode switch
  --compact-branches          Generate compact branches/jumps for MIPS R6
  --no-compact-branches       Generate delay slot branches/jumps for MIPS R6
elf32lr5900n32: 
  --insn32                    Only generate 32-bit microMIPS instructions
  --no-insn32                 Generate all microMIPS instructions
  --ignore-branch-isa         Accept invalid branch relocations requiring
                              an ISA mode switch
  --no-ignore-branch-isa      Reject invalid branch relocations requiring
                              an ISA mode switch
  --compact-branches          Generate compact branches/jumps for MIPS R6
  --no-compact-branches       Generate delay slot branches/jumps for MIPS R6
elf32lsmip: 
  --insn32                    Only generate 32-bit microMIPS instructions
  --no-insn32                 Generate all microMIPS instructions
  --ignore-branch-isa         Accept invalid branch relocations requiring
                              an ISA mode switch
  --no-ignore-branch-isa      Reject invalid branch relocations requiring
                              an ISA mode switch
  --compact-branches          Generate compact branches/jumps for MIPS R6
  --no-compact-branches       Generate delay slot branches/jumps for MIPS R6
elf32ltsmip: 
  --insn32                    Only generate 32-bit microMIPS instructions
  --no-insn32                 Generate all microMIPS instructions
  --ignore-branch-isa         Accept invalid branch relocations requiring
                              an ISA mode switch
  --no-ignore-branch-isa      Reject invalid branch relocations requiring
                              an ISA mode switch
  --compact-branches          Generate compact branches/jumps for MIPS R6
  --no-compact-branches       Generate delay slot branches/jumps for MIPS R6
elf32ltsmip_fbsd: 
  --insn32                    Only generate 32-bit microMIPS instructions
  --no-insn32                 Generate all microMIPS instructions
  --ignore-branch-isa         Accept invalid branch relocations requiring
                              an ISA mode switch
  --no-ignore-branch-isa      Reject invalid branch relocations requiring
                              an ISA mode switch
  --compact-branches          Generate compact branches/jumps for MIPS R6
  --no-compact-branches       Generate delay slot branches/jumps for MIPS R6
elf32ltsmipn32: 
  --insn32                    Only generate 32-bit microMIPS instructions
  --no-insn32                 Generate all microMIPS instructions
  --ignore-branch-isa         Accept invalid branch relocations requiring
                              an ISA mode switch
  --no-ignore-branch-isa      Reject invalid branch relocations requiring
                              an ISA mode switch
  --compact-branches          Generate compact branches/jumps for MIPS R6
  --no-compact-branches       Generate delay slot branches/jumps for MIPS R6
elf32ltsmipn32_fbsd: 
  --insn32                    Only generate 32-bit microMIPS instructions
  --no-insn32                 Generate all microMIPS instructions
  --ignore-branch-isa         Accept invalid branch relocations requiring
                              an ISA mode switch
  --no-ignore-branch-isa      Reject invalid branch relocations requiring
                              an ISA mode switch
  --compact-branches          Generate compact branches/jumps for MIPS R6
  --no-compact-branches       Generate delay slot branches/jumps for MIPS R6
elf32mipswindiss: 
  --insn32                    Only generate 32-bit microMIPS instructions
  --no-insn32                 Generate all microMIPS instructions
  --ignore-branch-isa         Accept invalid branch relocations requiring
                              an ISA mode switch
  --no-ignore-branch-isa      Reject invalid branch relocations requiring
                              an ISA mode switch
  --compact-branches          Generate compact branches/jumps for MIPS R6
  --no-compact-branches       Generate delay slot branches/jumps for MIPS R6
elf64_ia64: 
  --itanium                   Generate code for Intel Itanium processor
elf64_ia64_fbsd: 
  --itanium                   Generate code for Intel Itanium processor
elf64_ia64_vms: 
  --identification <string>          Set the identification of the output
elf64_s390: 
  --s390-pgste                Tell the kernel to allocate 4k page tables
elf64alpha: 
  --taso                      Load executable in the lower 31-bit addressable
                                virtual address range
  --secureplt                 Force PLT in text segment
  --no-secureplt              Force PLT in data segment
elf64alpha_fbsd: 
  --taso                      Load executable in the lower 31-bit addressable
                                virtual address range
  --secureplt                 Force PLT in text segment
  --no-secureplt              Force PLT in data segment
elf64alpha_nbsd: 
  --taso                      Load executable in the lower 31-bit addressable
                                virtual address range
  --secureplt                 Force PLT in text segment
  --no-secureplt              Force PLT in data segment
elf64bmip: 
  --insn32                    Only generate 32-bit microMIPS instructions
  --no-insn32                 Generate all microMIPS instructions
  --ignore-branch-isa         Accept invalid branch relocations requiring
                              an ISA mode switch
  --no-ignore-branch-isa      Reject invalid branch relocations requiring
                              an ISA mode switch
  --compact-branches          Generate compact branches/jumps for MIPS R6
  --no-compact-branches       Generate delay slot branches/jumps for MIPS R6
elf64btsmip: 
  --insn32                    Only generate 32-bit microMIPS instructions
  --no-insn32                 Generate all microMIPS instructions
  --ignore-branch-isa         Accept invalid branch relocations requiring
                              an ISA mode switch
  --no-ignore-branch-isa      Reject invalid branch relocations requiring
                              an ISA mode switch
  --compact-branches          Generate compact branches/jumps for MIPS R6
  --no-compact-branches       Generate delay slot branches/jumps for MIPS R6
elf64btsmip_fbsd: 
  --insn32                    Only generate 32-bit microMIPS instructions
  --no-insn32                 Generate all microMIPS instructions
  --ignore-branch-isa         Accept invalid branch relocations requiring
                              an ISA mode switch
  --no-ignore-branch-isa      Reject invalid branch relocations requiring
                              an ISA mode switch
  --compact-branches          Generate compact branches/jumps for MIPS R6
  --no-compact-branches       Generate delay slot branches/jumps for MIPS R6
elf64lppc: 
  -z dynamic-undefined-weak   Make undefined weak symbols dynamic
  -z nodynamic-undefined-weak Do not make undefined weak symbols dynamic
  --stub-group-size=N         Maximum size of a group of input sections that
                                can be handled by one stub section.  A negative
                                value locates all stubs before their branches
                                (with a group size of -N), while a positive
                                value allows two groups of input sections, one
                                before, and one after each stub section.
                                Values of +/-1 indicate the linker should
                                choose suitable defaults.
  --plt-static-chain          PLT call stubs should load r11 (default)
  --no-plt-static-chain       PLT call stubs should not load r11
  --plt-thread-safe           PLT call stubs with load-load barrier
  --no-plt-thread-safe        PLT call stubs without barrier
  --plt-align [=<align>]      Align PLT call stubs to fit cache lines
  --no-plt-align              Dont't align individual PLT call stubs
  --plt-localentry            Optimize calls to ELFv2 localentry:0 functions
  --no-plt-localentry         Don't optimize ELFv2 calls
  --emit-stub-syms            Label linker stubs with a symbol
  --no-emit-stub-syms         Don't label linker stubs with a symbol
  --dotsyms                   For every version pattern "foo" in a version
                                script, add ".foo" so that function code
                                symbols are treated the same as function
                                descriptor symbols.  Defaults to on.
  --no-dotsyms                Don't do anything special in version scripts
  --save-restore-funcs        Provide register save and restore routines used
                                by gcc -Os code.  Defaults to on for normal
                                final link, off for ld -r.
  --no-save-restore-funcs     Don't provide these routines
  --no-tls-optimize           Don't try to optimize TLS accesses
  --tls-get-addr-optimize     Force use of special __tls_get_addr call
  --no-tls-get-addr-optimize  Don't use a special __tls_get_addr call
  --no-opd-optimize           Don't optimize the OPD section
  --no-inline-optimize        Don't convert inline PLT to direct calls
  --no-toc-optimize           Don't optimize the TOC section
  --no-multi-toc              Disallow automatic multiple toc sections
  --no-toc-sort               Don't sort TOC and GOT sections
  --non-overlapping-opd       Canonicalize .opd, so that there are no
                                overlapping .opd entries
elf64ltsmip: 
  --insn32                    Only generate 32-bit microMIPS instructions
  --no-insn32                 Generate all microMIPS instructions
  --ignore-branch-isa         Accept invalid branch relocations requiring
                              an ISA mode switch
  --no-ignore-branch-isa      Reject invalid branch relocations requiring
                              an ISA mode switch
  --compact-branches          Generate compact branches/jumps for MIPS R6
  --no-compact-branches       Generate delay slot branches/jumps for MIPS R6
elf64ltsmip_fbsd: 
  --insn32                    Only generate 32-bit microMIPS instructions
  --no-insn32                 Generate all microMIPS instructions
  --ignore-branch-isa         Accept invalid branch relocations requiring
                              an ISA mode switch
  --no-ignore-branch-isa      Reject invalid branch relocations requiring
                              an ISA mode switch
  --compact-branches          Generate compact branches/jumps for MIPS R6
  --no-compact-branches       Generate delay slot branches/jumps for MIPS R6
elf64ppc: 
  -z dynamic-undefined-weak   Make undefined weak symbols dynamic
  -z nodynamic-undefined-weak Do not make undefined weak symbols dynamic
  --stub-group-size=N         Maximum size of a group of input sections that
                                can be handled by one stub section.  A negative
                                value locates all stubs before their branches
                                (with a group size of -N), while a positive
                                value allows two groups of input sections, one
                                before, and one after each stub section.
                                Values of +/-1 indicate the linker should
                                choose suitable defaults.
  --plt-static-chain          PLT call stubs should load r11 (default)
  --no-plt-static-chain       PLT call stubs should not load r11
  --plt-thread-safe           PLT call stubs with load-load barrier
  --no-plt-thread-safe        PLT call stubs without barrier
  --plt-align [=<align>]      Align PLT call stubs to fit cache lines
  --no-plt-align              Dont't align individual PLT call stubs
  --plt-localentry            Optimize calls to ELFv2 localentry:0 functions
  --no-plt-localentry         Don't optimize ELFv2 calls
  --emit-stub-syms            Label linker stubs with a symbol
  --no-emit-stub-syms         Don't label linker stubs with a symbol
  --dotsyms                   For every version pattern "foo" in a version
                                script, add ".foo" so that function code
                                symbols are treated the same as function
                                descriptor symbols.  Defaults to on.
  --no-dotsyms                Don't do anything special in version scripts
  --save-restore-funcs        Provide register save and restore routines used
                                by gcc -Os code.  Defaults to on for normal
                                final link, off for ld -r.
  --no-save-restore-funcs     Don't provide these routines
  --no-tls-optimize           Don't try to optimize TLS accesses
  --tls-get-addr-optimize     Force use of special __tls_get_addr call
  --no-tls-get-addr-optimize  Don't use a special __tls_get_addr call
  --no-opd-optimize           Don't optimize the OPD section
  --no-inline-optimize        Don't convert inline PLT to direct calls
  --no-toc-optimize           Don't optimize the TOC section
  --no-multi-toc              Disallow automatic multiple toc sections
  --no-toc-sort               Don't sort TOC and GOT sections
  --non-overlapping-opd       Canonicalize .opd, so that there are no
                                overlapping .opd entries
elf64ppc_fbsd: 
  -z dynamic-undefined-weak   Make undefined weak symbols dynamic
  -z nodynamic-undefined-weak Do not make undefined weak symbols dynamic
  --stub-group-size=N         Maximum size of a group of input sections that
                                can be handled by one stub section.  A negative
                                value locates all stubs before their branches
                                (with a group size of -N), while a positive
                                value allows two groups of input sections, one
                                before, and one after each stub section.
                                Values of +/-1 indicate the linker should
                                choose suitable defaults.
  --plt-static-chain          PLT call stubs should load r111
  --no-plt-static-chain       PLT call stubs should not load r11 (default)
  --plt-thread-safe           PLT call stubs with load-load barrier
  --no-plt-thread-safe        PLT call stubs without barrier
  --plt-align [=<align>]      Align PLT call stubs to fit cache lines
  --no-plt-align              Dont't align individual PLT call stubs
  --plt-localentry            Optimize calls to ELFv2 localentry:0 functions
  --no-plt-localentry         Don't optimize ELFv2 calls
  --emit-stub-syms            Label linker stubs with a symbol
  --no-emit-stub-syms         Don't label linker stubs with a symbol
  --dotsyms                   For every version pattern "foo" in a version
                                script, add ".foo" so that function code
                                symbols are treated the same as function
                                descriptor symbols.  Defaults to on.
  --no-dotsyms                Don't do anything special in version scripts
  --save-restore-funcs        Provide register save and restore routines used
                                by gcc -Os code.  Defaults to on for normal
                                final link, off for ld -r.
  --no-save-restore-funcs     Don't provide these routines
  --no-tls-optimize           Don't try to optimize TLS accesses
  --tls-get-addr-optimize     Force use of special __tls_get_addr call
  --no-tls-get-addr-optimize  Don't use a special __tls_get_addr call
  --no-opd-optimize           Don't optimize the OPD section
  --no-inline-optimize        Don't convert inline PLT to direct calls
  --no-toc-optimize           Don't optimize the TOC section
  --no-multi-toc              Disallow automatic multiple toc sections
  --no-toc-sort               Don't sort TOC and GOT sections
  --non-overlapping-opd       Canonicalize .opd, so that there are no
                                overlapping .opd entries
elf_l1om: 
  -z noextern-protected-data  Do not treat protected data symbol as external
  -z dynamic-undefined-weak   Make undefined weak symbols dynamic
  -z nodynamic-undefined-weak Do not make undefined weak symbols dynamic
  -z call-nop=PADDING         Use PADDING as 1-byte NOP for branch
elf_l1om_fbsd: 
  -z noextern-protected-data  Do not treat protected data symbol as external
  -z dynamic-undefined-weak   Make undefined weak symbols dynamic
  -z nodynamic-undefined-weak Do not make undefined weak symbols dynamic
  -z call-nop=PADDING         Use PADDING as 1-byte NOP for branch
elf_k1om: 
  -z noextern-protected-data  Do not treat protected data symbol as external
  -z dynamic-undefined-weak   Make undefined weak symbols dynamic
  -z nodynamic-undefined-weak Do not make undefined weak symbols dynamic
  -z call-nop=PADDING         Use PADDING as 1-byte NOP for branch
elf_k1om_fbsd: 
  -z noextern-protected-data  Do not treat protected data symbol as external
  -z dynamic-undefined-weak   Make undefined weak symbols dynamic
  -z nodynamic-undefined-weak Do not make undefined weak symbols dynamic
  -z call-nop=PADDING         Use PADDING as 1-byte NOP for branch
elf_x86_64: 
  -z noextern-protected-data  Do not treat protected data symbol as external
  -z dynamic-undefined-weak   Make undefined weak symbols dynamic
  -z nodynamic-undefined-weak Do not make undefined weak symbols dynamic
  -z noreloc-overflow         Disable relocation overflow check
  -z call-nop=PADDING         Use PADDING as 1-byte NOP for branch
  -z ibtplt                   Generate IBT-enabled PLT entries
  -z ibt                      Generate GNU_PROPERTY_X86_FEATURE_1_IBT
  -z shstk                    Generate GNU_PROPERTY_X86_FEATURE_1_SHSTK
  -z cet-report=[none|warning|error] (default: none)
                              Report missing IBT and SHSTK properties
elf_x86_64_cloudabi: 
  -z noextern-protected-data  Do not treat protected data symbol as external
  -z dynamic-undefined-weak   Make undefined weak symbols dynamic
  -z nodynamic-undefined-weak Do not make undefined weak symbols dynamic
  -z noreloc-overflow         Disable relocation overflow check
  -z call-nop=PADDING         Use PADDING as 1-byte NOP for branch
  -z ibtplt                   Generate IBT-enabled PLT entries
  -z ibt                      Generate GNU_PROPERTY_X86_FEATURE_1_IBT
  -z shstk                    Generate GNU_PROPERTY_X86_FEATURE_1_SHSTK
  -z cet-report=[none|warning|error] (default: none)
                              Report missing IBT and SHSTK properties
elf_x86_64_fbsd: 
  -z noextern-protected-data  Do not treat protected data symbol as external
  -z dynamic-undefined-weak   Make undefined weak symbols dynamic
  -z nodynamic-undefined-weak Do not make undefined weak symbols dynamic
  -z noreloc-overflow         Disable relocation overflow check
  -z call-nop=PADDING         Use PADDING as 1-byte NOP for branch
  -z ibtplt                   Generate IBT-enabled PLT entries
  -z ibt                      Generate GNU_PROPERTY_X86_FEATURE_1_IBT
  -z shstk                    Generate GNU_PROPERTY_X86_FEATURE_1_SHSTK
  -z cet-report=[none|warning|error] (default: none)
                              Report missing IBT and SHSTK properties
elf_x86_64_nacl: 
  -z noextern-protected-data  Do not treat protected data symbol as external
  -z dynamic-undefined-weak   Make undefined weak symbols dynamic
  -z nodynamic-undefined-weak Do not make undefined weak symbols dynamic
  -z noreloc-overflow         Disable relocation overflow check
  -z call-nop=PADDING         Use PADDING as 1-byte NOP for branch
  -z ibtplt                   Generate IBT-enabled PLT entries
  -z ibt                      Generate GNU_PROPERTY_X86_FEATURE_1_IBT
  -z shstk                    Generate GNU_PROPERTY_X86_FEATURE_1_SHSTK
  -z cet-report=[none|warning|error] (default: none)
                              Report missing IBT and SHSTK properties
elf_x86_64_sol2: 
  -z noextern-protected-data  Do not treat protected data symbol as external
  -z dynamic-undefined-weak   Make undefined weak symbols dynamic
  -z nodynamic-undefined-weak Do not make undefined weak symbols dynamic
  -z noreloc-overflow         Disable relocation overflow check
  -z call-nop=PADDING         Use PADDING as 1-byte NOP for branch
  -z ibtplt                   Generate IBT-enabled PLT entries
  -z ibt                      Generate GNU_PROPERTY_X86_FEATURE_1_IBT
  -z shstk                    Generate GNU_PROPERTY_X86_FEATURE_1_SHSTK
  -z cet-report=[none|warning|error] (default: none)
                              Report missing IBT and SHSTK properties
i386pep: 
  --base_file <basefile>             Generate a base file for relocatable DLLs
  --dll                              Set image base to the default for DLLs
  --file-alignment <size>            Set file alignment
  --heap <size>                      Set initial size of the heap
  --image-base <address>             Set start address of the executable
  --major-image-version <number>     Set version number of the executable
  --major-os-version <number>        Set minimum required OS version
  --major-subsystem-version <number> Set minimum required OS subsystem version
  --minor-image-version <number>     Set revision number of the executable
  --minor-os-version <number>        Set minimum required OS revision
  --minor-subsystem-version <number> Set minimum required OS subsystem revision
  --section-alignment <size>         Set section alignment
  --stack <size>                     Set size of the initial stack
  --subsystem <name>[:<version>]     Set required OS subsystem [& version]
  --support-old-code                 Support interworking with old code
  --[no-]leading-underscore          Set explicit symbol underscore prefix mode
  --[no-]insert-timestamp            Use a real timestamp rather than zero (default)
                                     This makes binaries non-deterministic
  --add-stdcall-alias                Export symbols with and without @nn
  --disable-stdcall-fixup            Don't link _sym to _sym@nn
  --enable-stdcall-fixup             Link _sym to _sym@nn without warnings
  --exclude-symbols sym,sym,...      Exclude symbols from automatic export
  --exclude-all-symbols              Exclude all symbols from automatic export
  --exclude-libs lib,lib,...         Exclude libraries from automatic export
  --exclude-modules-for-implib mod,mod,...
                                     Exclude objects, archive members from auto
                                     export, place into import library instead
  --export-all-symbols               Automatically export all globals to DLL
  --kill-at                          Remove @nn from exported symbols
  --output-def <file>                Generate a .DEF file for the built DLL
  --warn-duplicate-exports           Warn about duplicate exports
  --compat-implib                    Create backward compatible import libs;
                                       create __imp_<SYMBOL> as well
  --enable-auto-image-base           Automatically choose image base for DLLs
                                       unless user specifies one
  --disable-auto-image-base          Do not auto-choose image base (default)
  --dll-search-prefix=<string>       When linking dynamically to a dll without
                                       an importlib, use <string><basename>.dll
                                       in preference to lib<basename>.dll 
  --enable-auto-import               Do sophisticated linking of _sym to
                                       __imp_sym for DATA references
  --disable-auto-import              Do not auto-import DATA items from DLLs
  --enable-runtime-pseudo-reloc      Work around auto-import limitations by
                                       adding pseudo-relocations resolved at
                                       runtime
  --disable-runtime-pseudo-reloc     Do not add runtime pseudo-relocations for
                                       auto-imported DATA
  --enable-extra-pep-debug            Enable verbose debug output when building
                                       or linking to DLLs (esp. auto-import)
  --enable-long-section-names        Use long COFF section names even in
                                       executable image files
  --disable-long-section-names       Never use long COFF section names, even
                                       in object files
  --high-entropy-va                  Image is compatible with 64-bit address space
                                       layout randomization (ASLR)
  --dynamicbase                      Image base address may be relocated using
                                       address space layout randomization (ASLR)
  --enable-reloc-section             Create the base relocation table
  --forceinteg               Code integrity checks are enforced
  --nxcompat                 Image is compatible with data execution prevention
  --no-isolation             Image understands isolation but do not isolate the image
  --no-seh                   Image does not use SEH; no SE handler may
                                       be called in this image
  --no-bind                  Do not bind this image
  --wdmdriver                Driver uses the WDM model
  --tsaware                  Image is Terminal Server aware
  --build-id[=STYLE]         Generate build ID
